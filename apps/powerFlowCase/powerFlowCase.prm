options
{
   // Only one of the two options below can be set to true
   writeSetupForestAndReturn false;  // If set to true, the blocks in the domain will be output in a vtk file. The simulation will be terminated after this to save memory
   writeVoxelfile false;            // If set to true, the voxels in the domain will be output in a vtk file. The simulation will be terminated after this to save memory
   writeAirfoilMeshAndReturn false;          // If set true the airfoil stl mesh is written in a vtu file. The simulation will be terminated after this to save memory
   writeUnitsFile true;       // Write the file with physical and lattice units

   useTurbulenceModel true;
}

flowParameters
{ 
   angleOfAttack 2.0;              // [deg] Physical angle of attack of the flow with respect to the airfoil  
   velocityMagnitudeSI 20;           // [m/s] Physical absolute velocity of the flow 
   kinViscositySI 1.461e-05;          // [m2/s] Physical kinematic viscosity of the flow
   rhoSI 1.225;                      // [kg/m3] Physical air density
   temperatureSI 288.1;                 // [K] Temperature
}

simulationParameters
{
   omega 1.8;                       // Relaxation factor for the SRT model
   machLU 0.1;
   timeSteps   1000;              // Number of time steps in the simulation
   remainingTimeLoggerFrequency 120; // in seconds. This is the frequency with which a time estimate of finilising the simulation is send in the terminal. 
   smagorinskyConstant 0.12;
}

domainParameters
{
    meshFile         NACA0018.stl;   		 // Object geometry of the airfoil. This must be an ASCII file. If it is binary you should convert it. Also, the mesh must be watertight so no open sides. 
    scalePowerFlowDomain true;          	 // Do you want the full PowerFlow domain. If not, set to false and define an own domainScaling
    decreasePowerFlowDomainFactor 0.142857142; // 0.028571428;		 // Set to 1 if the full domain is desired. Change the number of cells in a block accordingly
    dxSI               0.0051015625;          // Unrefined cell size in mm since the airfoil dimensions are in meters
    numLevels        4;                  	 // Number of octree levels starting from 1
    meshZScaling     1;                    // This factor can be used to change the span of the airfoil. The NACA0018 file has a span of 0.081625 which corresponds to a y-scaling of 1
    
    periodic         <  0, 0, 1 >;       	 // Are there period sides? 0 -> No, 1 -> Yes  For every direction < x, y, z >
    numGhostLayers   4;

}

spongeZoneParameters
{
   spongeInnerThicknessFactor 0.5;
   spongeOuterThicknessFactor 0.75;
   sponge_nuT_min 0.0;
   sponge_nuT_max 0.5;


}

boundaryConditions 
{
   velocity0 < 0.057735, 0, 0 >;        // velocity of cells where Velocity0 boundary is set (aoa = 0)
	velocity1 <   0.057699829, 2.014922e-3, 0 >;        // velocity of cells where Velocity1 boundary is set
	pressure0 1.01;		            // pressure of cells where Pressure0 boundary is set
	pressure1 1.0;			        // pressure of cells where Pressure1 boundary is set
    
    /* 
       possible sub-blocks: documentation for the subblocks can be found in src/geometry/initializers/BoundaryFrom*.h
       	   - CellInterval	 BoundaryFromCellInterval.h
       	   - Border          BoundaryFromDomainBorder.h
       	   - VoxelFile	     BoundaryFromVoxelFile.h
       	   - Body			 BoundaryFromBody.h
       	   - GrayScaleImage  BoundaryFromImage.h
       	   - RGBAImage	     BoundaryFromImage.h
    */
    
	Border { direction N,S,W;    walldistance -1;  Velocity1 {} }
	Border { direction E;    walldistance -1;  Pressure1 {} }
   // Border { direction W;    walldistance -1;  Velocity0 {} }
	// Border { direction E;    walldistance -1;  Pressure1 {} }
	// Border { direction S,N;  walldistance -1;  NoSlip    {} }
		
}

// Parameters for the stability check. If NaN values occur, the simululation is terminated. 
stabilityChecker
{
   checkFrequency 1; // [time steps]
   streamOutput   false; // Do not use. This will overload the SSD
   vtkOutput      false;

   // OPTIONS
   // checkFrequency     [unsigned integer]; // check frequency [default:0]
   // streamOutput       [boolean]; // output to stream? [default: true]
   // vtkOutput          [boolean]; // output to VTK? [default:true]
   // vtkBaseFolder      [string]; // VTK base folder [default: vtk_out]
   // vtkExecutionFolder [string]; // VTK execution folder [default:output]
   // vtkIdentifier      [string]; // VTK identifier [default: error_field]
   // vtkBinary          [boolean]; // write VTK data in binary? [default: true]
   // vtkLittleEndian    [boolean]; // VTK binary file format [default: true (= little endian)]
   // vtkMPIIO           [boolean]; // use MPI IO for creating VTK output? [default: true]
   // vtkForcePVTU       [boolean]; // force VTK to generate a PVTU file? [default: false]
}

VTK 
{
   // for parameter documentation see src/vtk/Initialization.cpp
   fluid_field
   {
      writeFrequency 100;           // [time steps] Output a VTK file at writeFrequency
      ghostLayers    4;             // Number of ghostlayers to exclude from the VTK output
      
      vtkBeforFunctions {
         PDFGhostLayerSync;
      }
      
      vtkInclusionFilters {
         DomainFilter;
      }
      
      vtkWriters {
         Velocity;
         Density;
         Omega;
      }
   }
   
   vtkFlagField
   {
      writeFrequency 1000000000; // write only once
      ghostLayers    4;
      
      writers {
         FlagField;
      }
   }
   
   vtkDomainDecomposition
   {
      writeFrequency 1000000000;           // write only once
      outputDomainDecomposition true;
   }
}

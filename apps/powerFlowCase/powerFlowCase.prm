options
{
   WriteSetupForestAndReturn False;
}

flowParameters
{ 
    velocityMagnitude 10;           // [m/s] Absolute velocity of the flow 
    angleOfAttack 7.8;              // [deg] Angle of attack of the flow with respect to the airfoil  
}

simulationParameters
{
    omega 1.6                       // Relaxation factor for the SRT model
    timeSteps   1;              // Number of time steps in the simulation
    // useGui      0;                  // The GUI will not be used
    remainingTimeLoggerFrequency 3; // in seconds. This is the frequency with which a time estimate of finilising the simulation is send in the terminal. 

}

domainParameters
{
    meshFile         NACA0018.obj;    // Object geometry of the airfoil. This must be an ASCII file. If it is binary you should convert it.
    numLevels        2;                   // Number of octree levels starting from 1
    dx               0.04;                // Unrefined cell size
    scalePowerFlowDomain true;           // Do you want the full PowerFlow domain. If not, set to false and define an own domainScaling
    
    // domainScaling    <  100, 1, 556 >;    // Scaling of the domain compared to the object. So < 100, 1, 556 > means 100 times the chord of the airfoil, 1 time the span and 556 times the thickness. 
    // blocks           <  500, 2, 500 >;    // Number of blocks in the < x, y, z > directions
    // cellsPerBlock    <  1, 1, 1 >;        // Number of cells in each block in the < x, y, z > directions. This is also called blockSize in some codes. For refinement at least < 16, 16, 16 > is required
    
    // FOR TESTING PURPOSES
    domainScaling    <  100, 1, 600 >;    // Scaling of the domain compared to the object.  
    blocks           <  32, 1, 32 >;    // Number of blocks in the < x, y, z > directions
    cellsPerBlock    <  16, 2, 16 >;        // Number of cells in each block in the < x, y, z > directions. This is also called blockSize in some codes. For refinement at least < 16, 16, 16 > is required
    
    
    
    periodic         <  0, 1, 0 >;        // Are there period sides? 0 -> No, 1 -> Yes  For every direction < x, y, z >
    numGhostLayers   4;
}

boundaryConditions 
{
	velocity0 < 0.1, 0, 0 >;        // velocity of cells where Velocity0 boundary is set
	velocity1 <   0, 0, 0 >;        // velocity of cells where Velocity1 boundary is set
	pressure0 1.1;		            // pressure of cells where Pressure0 boundary is set
	pressure1 1.0;			        // pressure of cells where Pressure1 boundary is set
    
    /* 
       possible sub-blocks: documentation for the subblocks can be found in src/geometry/initializers/BoundaryFrom*.h
       	   - CellInterval	 BoundaryFromCellInterval.h
       	   - Border          BoundaryFromDomainBorder.h
       	   - VoxelFile	     BoundaryFromVoxelFile.h
       	   - Body			 BoundaryFromBody.h
       	   - GrayScaleImage  BoundaryFromImage.h
       	   - RGBAImage	     BoundaryFromImage.h
    */
    
	Border { direction W;    walldistance -1;  Velocity0 {} }
	Border { direction E;    walldistance -1;  Pressure1 {} }
	Border { direction S,N;  walldistance -1;  NoSlip    {} }
		
}

// Parameters for the stability check. If NaN values occur, the simululation is terminated. 
stabilityChecker
{
   checkFrequency 1;
   streamOutput   false;
   vtkOutput      true;
}

VTK 
{
   // for parameter documentation see src/vtk/Initialization.cpp
   fluid_field
   {
      writeFrequency 1;           // [time steps] Output a VTK file at writeFrequency
      ghostLayers    4;             // Number of ghostlayers to exclude from the VTK output
      
      vtkBeforFunctions {
         PDFGhostLayerSync;
      }
      
      vtkInclusionFilters {
         DomainFilter;
      }
      
      vtkWriters {
         Velocity;
         Density;
         Pressure;
      }
   }
   
   vtkFlagField
   {
      writeFrequency 1; // write only once
      ghostLayers    4;
      
      writers {
         FlagField;
      }
   }
   
   vtkDomainDecomposition
   {
      writeFrequency 1;           // write only once
      outputDomainDecomposition true;
   }
}
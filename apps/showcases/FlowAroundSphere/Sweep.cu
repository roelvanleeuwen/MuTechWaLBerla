//======================================================================================================================
//
//  This file is part of waLBerla. waLBerla is free software: you can
//  redistribute it and/or modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version.
//
//  waLBerla is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
//  for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with waLBerla (see COPYING.txt). If not, see <http://www.gnu.org/licenses/>.
//
//! \\file TestSweepCollection.cpp
//! \\author pystencils
//======================================================================================================================
#include "Sweep.h"

#define FUNC_PREFIX __global__

#if ( defined WALBERLA_CXX_COMPILER_IS_GNU ) || ( defined WALBERLA_CXX_COMPILER_IS_CLANG )
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wunused-variable"
#endif

#if ( defined WALBERLA_CXX_COMPILER_IS_INTEL )
#pragma warning push
#pragma warning( disable :  1599 )
#endif

using namespace std;
#define KERNEL_ABS abs

namespace walberla {
namespace lbm {

inline __device__ void forwardInverseChimeraWithK(real_t &mfa, real_t &mfb, real_t &mfc, real_t vv,
                                                           real_t v2, real_t Kinverse, real_t K)
{
   const real_t m2 = mfa + mfc;
   const real_t m1 = mfc - mfa;
   real_t m0 = m2 + mfb;

   mfa = m0;
   m0 *= Kinverse;
   m0 += real_t(1.0);
   mfb = (m1 * Kinverse - m0 * vv) * K;
   mfc = ((m2 - real_t(2.0) * m1 * vv) * Kinverse + v2 * m0) * K;
}

inline __device__ void forwardChimera(real_t &mfa, real_t &mfb, real_t &mfc, real_t vv, real_t v2)
{
   const real_t m1 = (mfa + mfc) + mfb;
   const real_t m2 = mfc - mfa;

   mfc = (mfc + mfa) + (v2 * m1 - real_t(2.0) * vv * m2);
   mfb = m2 - vv * m1;
   mfa = m1;
}

inline __device__ void backwardInverseChimeraWithK(real_t &mfa, real_t &mfb, real_t &mfc, real_t vv,
                                                   real_t v2, real_t Kinverse, real_t K)
{
   const real_t m0 = (((mfc - mfb) * real_t(0.5) + mfb * vv) * Kinverse + (mfa * Kinverse + real_t(1.0)) * (v2 - vv) * real_t(0.5)) * K;
   const real_t m1 = (((mfa - mfc) - real_t(2.0) * mfb * vv) * Kinverse + (mfa * Kinverse + real_t(1.0)) * (-v2)) * K;

   mfc = (((mfc + mfb) * real_t(0.5) + mfb * vv) * Kinverse + (mfa * Kinverse + real_t(1.0)) * (v2 + vv) * real_t(0.5)) * K;
   mfa = m0;
   mfb = m1;
}

inline __device__ void backwardChimera(real_t &mfa, real_t &mfb, real_t &mfc, real_t vv, real_t v2)
{
   const real_t ma = (mfc + mfa * (v2 - vv)) * real_t(0.5) + mfb * (vv - real_t(0.5));
   const real_t mb = ((mfa - mfc) - mfa * v2) - real_t(2.0) * mfb * vv;

   mfc = (mfc + mfa * (v2 + vv)) * real_t(0.5) + mfb * (vv + real_t(0.5));
   mfb = mb;
   mfa = ma;
}

namespace internal_TestSweepCollection_kernel_streamCollideEven {
static FUNC_PREFIX void TestSweepCollection_kernel_streamCollideEven(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;

      const real_t c0o1 = real_t(0.0) / real_t(1.0);
      const real_t c1o1 = real_t(1.0) / real_t(1.0);
      const real_t c2o1 = real_t(2.0) / real_t(1.0);
      const real_t c3o1 = real_t(3.0) / real_t(1.0);
      const real_t c4o1 = real_t(4.0) / real_t(1.0);
      const real_t c5o1 = real_t(5.0) / real_t(1.0);
      const real_t c6o1 = real_t(6.0) / real_t(1.0);
      const real_t c7o1 = real_t(7.0) / real_t(1.0);
      const real_t c8o1 = real_t(8.0) / real_t(1.0);
      const real_t c9o1 = real_t(9.0) / real_t(1.0);
      const real_t c14o1 = real_t(14.0) / real_t(1.0);
      const real_t c15o1 = real_t(15.0) / real_t(1.0);
      const real_t c16o1 = real_t(16.0) / real_t(1.0);
      const real_t c18o1 = real_t(18.0) / real_t(1.0);
      const real_t c21o1 = real_t(21.0) / real_t(1.0);
      const real_t c24o1 = real_t(24.0) / real_t(1.0);
      const real_t c28o1 = real_t(28.0) / real_t(1.0);
      const real_t c29o1 = real_t(29.0) / real_t(1.0);
      const real_t c36o1 = real_t(36.0) / real_t(1.0);
      const real_t c48o1 = real_t(48.0) / real_t(1.0);
      const real_t c50o1 = real_t(50.0) / real_t(1.0);
      const real_t c56o1 = real_t(56.0) / real_t(1.0);
      const real_t c130o1 = real_t(130.0) / real_t(1.0);
      const real_t c152o1 = real_t(152.0) / real_t(1.0);

      const real_t c1o2 = real_t(1.0) / real_t(2.0);
      const real_t c3o2 = real_t(3.0) / real_t(2.0);
      const real_t c9o2 = real_t(9.0) / real_t(2.0);

      const real_t c9o4 = real_t(9.0) / real_t(4.0);

      const real_t c1o3 = real_t(1.0) / real_t(3.0);
      const real_t c2o3 = real_t(2.0) / real_t(3.0);
      const real_t c2o9 = real_t(2.0) / real_t(9.0);
      const real_t c4o9 = real_t(4.0) / real_t(9.0);

      const real_t c1o4 = real_t(1.0) / real_t(4.0);
      const real_t c1o6 = real_t(1.0) / real_t(6.0);
      const real_t c1o8 = real_t(1.0) / real_t(8.0);
      const real_t c1o9 = real_t(1.0) / real_t(9.0);
      const real_t c1o16 = real_t(1.0) / real_t(16.0);
      const real_t c1o18 = real_t(1.0) / real_t(18.0);
      const real_t c1o27 = real_t(1.0) / real_t(27.0);
      const real_t c1o36 = real_t(1.0) / real_t(36.0);
      const real_t c1o64 = real_t(1.0) / real_t(64.0);

      real_t& f000 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      real_t& fP00 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      real_t& fM00 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      real_t& f0P0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      real_t& f0M0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      real_t& f00P = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3];
      real_t& f00M = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3];
      real_t& fPP0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      real_t& fMM0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      real_t& fPM0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      real_t& fMP0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      real_t& fP0P = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3];
      real_t& fM0M = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3];
      real_t& fP0M = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3];
      real_t& fM0P = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3];
      real_t& f0PP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3];
      real_t& f0MM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3];
      real_t& f0PM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3];
      real_t& f0MP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3];
      real_t& fPPP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3];
      real_t& fMPP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3];
      real_t& fPMP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3];
      real_t& fMMP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3];
      real_t& fPPM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3];
      real_t& fMPM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3];
      real_t& fPMM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3];
      real_t& fMMM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3];

      real_t& m111 = f000;
      real_t& m211 = fP00;
      real_t& m011 = fM00;
      real_t& m121 = f0P0;
      real_t& m101 = f0M0;
      real_t& m112 = f00P;
      real_t& m110 = f00M;
      real_t& m221 = fPP0;
      real_t& m001 = fMM0;
      real_t& m201 = fPM0;
      real_t& m021 = fMP0;
      real_t& m212 = fP0P;
      real_t& m010 = fM0M;
      real_t& m210 = fP0M;
      real_t& m012 = fM0P;
      real_t& m122 = f0PP;
      real_t& m100 = f0MM;
      real_t& m120 = f0PM;
      real_t& m102 = f0MP;
      real_t& m222 = fPPP;
      real_t& m022 = fMPP;
      real_t& m202 = fPMP;
      real_t& m002 = fMMP;
      real_t& m220 = fPPM;
      real_t& m020 = fMPM;
      real_t& m200 = fPMM;
      real_t& m000 = fMMM;


      real_t drho;
      real_t oneOverRho;
      real_t vvx;
      real_t vvy;
      real_t vvz;

      drho = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3])) +
                      ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3]))) +
                     (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3])) +
                      ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3])) +
                      ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3]))) +
                     _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2]) +
                    ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3]));
      oneOverRho = real_t(1.0) / (drho + real_t(1.0));

      vvx = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3]))) +
             (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3]))) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3]));

      vvy = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3]))) +
             (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3]))) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3]));

      vvz = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3]))) +
             (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3]))) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3]));

      vvx *= oneOverRho;
      vvy *= oneOverRho;
      vvz *= oneOverRho;

      ////////////////////////////////////////////////////////////////////////////////////
      // calculate the square of velocities for this lattice node
      real_t vx2 = vvx * vvx;
      real_t vy2 = vvy * vvy;
      real_t vz2 = vvz * vvz;
      ////////////////////////////////////////////////////////////////////////////////////
      //! - Set relaxation limiters for third order cumulants to default value \f$ \lambda=0.001 \f$ according to
      //! section 6 in \ref <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      real_t quadricLimitP = 0.01;
      real_t quadricLimitM = 0.01;
      real_t quadricLimitD = 0.01;
      ////////////////////////////////////////////////////////////////////////////////////
      //! - Chimera transform from well conditioned distributions to central moments as defined in Appendix J in \ref
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a> see also Eq. (6)-(14) in \ref <a
      //! href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017), DOI:10.1016/j.jcp.2017.05.040
      //! ]</b></a>
      //!
      ////////////////////////////////////////////////////////////////////////////////////
      // Z - Dir
      forwardInverseChimeraWithK(fMMM, fMM0, fMMP, vvz, vz2, c36o1, c1o36);
      forwardInverseChimeraWithK(fM0M, fM00, fM0P, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(fMPM, fMP0, fMPP, vvz, vz2, c36o1, c1o36);
      forwardInverseChimeraWithK(f0MM, f0M0, f0MP, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(f00M, f000, f00P, vvz, vz2, c9o4,  c4o9);
      forwardInverseChimeraWithK(f0PM, f0P0, f0PP, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(fPMM, fPM0, fPMP, vvz, vz2, c36o1, c1o36);
      forwardInverseChimeraWithK(fP0M, fP00, fP0P, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(fPPM, fPP0, fPPP, vvz, vz2, c36o1, c1o36);

      ////////////////////////////////////////////////////////////////////////////////////
      // Y - Dir
      forwardInverseChimeraWithK(fMMM, fM0M, fMPM, vvy, vy2, c6o1,  c1o6);
      forwardChimera(            fMM0, fM00, fMP0, vvy, vy2);
      forwardInverseChimeraWithK(fMMP, fM0P, fMPP, vvy, vy2, c18o1, c1o18);
      forwardInverseChimeraWithK(f0MM, f00M, f0PM, vvy, vy2, c3o2,  c2o3);
      forwardChimera(            f0M0, f000, f0P0, vvy, vy2);
      forwardInverseChimeraWithK(f0MP, f00P, f0PP, vvy, vy2, c9o2,  c2o9);
      forwardInverseChimeraWithK(fPMM, fP0M, fPPM, vvy, vy2, c6o1,  c1o6);
      forwardChimera(            fPM0, fP00, fPP0, vvy, vy2);
      forwardInverseChimeraWithK(fPMP, fP0P, fPPP, vvy, vy2, c18o1, c1o18);

      ////////////////////////////////////////////////////////////////////////////////////
      // X - Dir
      forwardInverseChimeraWithK(fMMM, f0MM, fPMM, vvx, vx2, c1o1, c1o1);
      forwardChimera(            fM0M, f00M, fP0M, vvx, vx2);
      forwardInverseChimeraWithK(fMPM, f0PM, fPPM, vvx, vx2, c3o1, c1o3);
      forwardChimera(            fMM0, f0M0, fPM0, vvx, vx2);
      forwardChimera(            fM00, f000, fP00, vvx, vx2);
      forwardChimera(            fMP0, f0P0, fPP0, vvx, vx2);
      forwardInverseChimeraWithK(fMMP, f0MP, fPMP, vvx, vx2, c3o1, c1o3);
      forwardChimera(            fM0P, f00P, fP0P, vvx, vx2);
      forwardInverseChimeraWithK(fMPP, f0PP, fPPP, vvx, vx2, c3o1, c1o9);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Setting relaxation rates for non-hydrodynamic cumulants (default values). Variable names and equations
      //! according to <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!  => [NAME IN PAPER]=[NAME IN CODE]=[DEFAULT VALUE].
      //!  - Trace of second order cumulants \f$ C{200}+C{020}+C{002} \f$ used to adjust bulk
      //!  viscosity:\f$\omega2=OxxPyyPzz=1.0 \f$.
      //!  - Third order cumulants \f$ C{120}+C{102}, C{210}+C{012}, C{201}+C{021} \f$: \f$ \omega3=OxyyPxzz
      //!  \f$ set according to Eq. (111) with simplifications assuming \f$ \omega2=1.0\f$.
      //!  - Third order cumulants \f$ C{120}-C{102}, C{210}-C{012}, C{201}-C{021} \f$: \f$ \omega4 = OxyyMxzz
      //!  \f$ set according to Eq. (112) with simplifications assuming \f$ \omega2 = 1.0\f$.
      //!  - Third order cumulants \f$ C{111} \f$: \f$ \omega5 = Oxyz \f$ set according to Eq. (113) with
      //!  simplifications assuming \f$ \omega2 = 1.0\f$  (modify for different bulk viscosity).
      //!  - Fourth order cumulants \f$ C{220}, C{202}, C{022}, C{211}, C{121}, C{112} \f$: for simplification
      //!  all set to the same default value \f$ \omega6=\omega7=\omega8=O4=1.0 \f$.
      //!  - Fifth order cumulants \f$ C{221}, C{212}, C{122}\f$: \f$\omega9=O5=1.0\f$.
      //!  - Sixth order cumulant \f$ C{222}\f$: \f$\omega{10}=O6=1.0\f$.
      //!
      ////////////////////////////////////////////////////////////////////////////////////
      //! - Calculate modified omega with turbulent viscosity
      //!////////////////////////////////////////////////////////////
      // 2.
      real_t OxxPyyPzz = c1o1;
      ////////////////////////////////////////////////////////////
      // 3.
      real_t OxyyPxzz = c8o1 * (-c2o1 + omega) * (c1o1 + c2o1 * omega) / (-c8o1 - c14o1 * omega + c7o1 * omega * omega);
      real_t OxyyMxzz =
         c8o1 * (-c2o1 + omega) * (-c7o1 + c4o1 * omega) / (c56o1 - c50o1 * omega + c9o1 * omega * omega);
      real_t Oxyz = c24o1 * (-c2o1 + omega) * (-c2o1 - c7o1 * omega + c3o1 * omega * omega) /
                  (c48o1 + c152o1 * omega - c130o1 * omega * omega + c29o1 * omega * omega * omega);
      ////////////////////////////////////////////////////////////
      // 4.
      real_t O4 = c1o1;
      ////////////////////////////////////////////////////////////
      // 5.
      real_t O5 = c1o1;
      ////////////////////////////////////////////////////////////
      // 6.
      real_t O6 = c1o1;

      ////////////////////////////////////////////////////////////////////////////////////
      //! - A and d00M: parameters for fourth order convergence of the diffusion term according to Eq. (115) and (116)
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a> with simplifications assuming \f$ \omega_2 = 1.0 \f$ (modify for
      //! different bulk viscosity).
      //!
      real_t factorA = (c4o1 + c2o1 * omega - c3o1 * omega * omega) / (c2o1 - c7o1 * omega + c5o1 * omega * omega);
      real_t factorB = (c4o1 + c28o1 * omega - c14o1 * omega * omega) / (c6o1 - c21o1 * omega + c15o1 * omega * omega);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute cumulants from central moments according to Eq. (20)-(23) in
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      ////////////////////////////////////////////////////////////
      // 4.
      real_t cm211 = m211 - ((m200 + c1o3) * m011 + c2o1 * m110 * m101) * oneOverRho;
      real_t cm121 = m121 - ((m020 + c1o3) * m101 + c2o1 * m110 * m011) * oneOverRho;
      real_t cm112 = m112 - ((m002 + c1o3) * m110 + c2o1 * m101 * m011) * oneOverRho;

      real_t cm220 = m220 - (((m200 * m020 + c2o1 * m110 * m110) + c1o3 * (m200 + m020)) * oneOverRho - c1o9 * (drho * oneOverRho));
      real_t cm202 = m202 - (((m200 * m002 + c2o1 * m101 * m101) + c1o3 * (m200 + m002)) * oneOverRho - c1o9 * (drho * oneOverRho));
      real_t cm022 = m022 - (((m002 * m020 + c2o1 * m011 * m011) + c1o3 * (m002 + m020)) * oneOverRho - c1o9 * (drho * oneOverRho));
      ////////////////////////////////////////////////////////////
      // 5.
      real_t cm122 =
         m122 - ((m002 * m120 + m020 * m102 + c4o1 * m011 * m111 + c2o1 * (m101 * m021 + m110 * m012)) +
                 c1o3 * (m120 + m102)) *
                   oneOverRho;
      real_t cm212 =
         m212 - ((m002 * m210 + m200 * m012 + c4o1 * m101 * m111 + c2o1 * (m011 * m201 + m110 * m102)) +
                 c1o3 * (m210 + m012)) *
                   oneOverRho;
      real_t cm221 =
         m221 - ((m200 * m021 + m020 * m201 + c4o1 * m110 * m111 + c2o1 * (m101 * m120 + m011 * m210)) +
                 c1o3 * (m021 + m201)) *
                   oneOverRho;
      ////////////////////////////////////////////////////////////
      // 6.
      real_t cm222 = m222 + ((-c4o1 * m111 * m111 - (m200 * m022 + m020 * m202 + m002 * m220) -
                            c4o1 * (m011 * m211 + m101 * m121 + m110 * m112) -
                            c2o1 * (m120 * m102 + m210 * m012 + m201 * m021)) *
                              oneOverRho +
                           (c4o1 * (m101 * m101 * m020 + m011 * m011 * m200 + m110 * m110 * m002) +
                            c2o1 * (m200 * m020 * m002) + c16o1 * m110 * m101 * m011) *
                              oneOverRho * oneOverRho -
                           c1o3 * (m022 + m202 + m220) * oneOverRho - c1o9 * (m200 + m020 + m002) * oneOverRho +
                           (c2o1 * (m101 * m101 + m011 * m011 + m110 * m110) +
                            (m002 * m020 + m002 * m200 + m020 * m200) + c1o3 * (m002 + m020 + m200)) *
                              oneOverRho * oneOverRho * c2o3 +
                           c1o27 * ((drho * drho - drho) * oneOverRho * oneOverRho));

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute linear combinations of second and third order cumulants
      //!
      ////////////////////////////////////////////////////////////
      // 2.
      real_t mxxPyyPzz = m200 + m020 + m002;
      real_t mxxMyy    = m200 - m020;
      real_t mxxMzz    = m200 - m002;
      ////////////////////////////////////////////////////////////
      // 3.
      real_t mxxyPyzz = m210 + m012;
      real_t mxxyMyzz = m210 - m012;

      real_t mxxzPyyz = m201 + m021;
      real_t mxxzMyyz = m201 - m021;

      real_t mxyyPxzz = m120 + m102;
      real_t mxyyMxzz = m120 - m102;

      ////////////////////////////////////////////////////////////////////////////////////
      // incl. correction
      ////////////////////////////////////////////////////////////
      //! - Compute velocity  gradients from second order cumulants according to Eq. (27)-(32)
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a> Further explanations of the correction in viscosity in Appendix H of
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a> Note that the division by rho is omitted here as we need rho times
      //! the gradients later.
      //!
      real_t Dxy = -c3o1 * omega * m110;
      real_t Dxz = -c3o1 * omega * m101;
      real_t Dyz = -c3o1 * omega * m011;
      real_t dxux = c1o2 * (-omega) * (mxxMyy + mxxMzz) + c1o2 * OxxPyyPzz * (m000 - mxxPyyPzz);
      real_t dyuy = dxux + omega * c3o2 * mxxMyy;
      real_t dzuz = dxux + omega * c3o2 * mxxMzz;


      ////////////////////////////////////////////////////////////
      //! - Relaxation of second order cumulants with correction terms according to Eq. (33)-(35) in
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      mxxPyyPzz += OxxPyyPzz * (m000 - mxxPyyPzz) - c3o1 * (c1o1 - c1o2 * OxxPyyPzz) * (vx2 * dxux + vy2 * dyuy + vz2 * dzuz);
      mxxMyy += omega * (-mxxMyy) - c3o1 * (c1o1 + c1o2 * (-omega)) * (vx2 * dxux - vy2 * dyuy);
      mxxMzz += omega * (-mxxMzz) - c3o1 * (c1o1 + c1o2 * (-omega)) * (vx2 * dxux - vz2 * dzuz);

      ////////////////////////////////////////////////////////////////////////////////////
      ////no correction
      // mxxPyyPzz += OxxPyyPzz*(mfaaa - mxxPyyPzz);
      // mxxMyy += -(-omega) * (-mxxMyy);
      // mxxMzz += -(-omega) * (-mxxMzz);
      //////////////////////////////////////////////////////////////////////////
      m011 += omega * (-m011);
      m101 += omega * (-m101);
      m110 += omega * (-m110);

      ////////////////////////////////////////////////////////////////////////////////////
      // relax
      //////////////////////////////////////////////////////////////////////////
      // incl. limiter
      //! - Relaxation of third order cumulants including limiter according to Eq. (116)-(123)
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      real_t wadjust = Oxyz + (c1o1 - Oxyz) * KERNEL_ABS(m111) / (KERNEL_ABS(m111) + quadricLimitD);
      m111 += wadjust * (-m111);
      wadjust = OxyyPxzz + (c1o1 - OxyyPxzz) * KERNEL_ABS(mxxyPyzz) / (KERNEL_ABS(mxxyPyzz) + quadricLimitP);
      mxxyPyzz += wadjust * (-mxxyPyzz);
      wadjust = OxyyMxzz + (c1o1 - OxyyMxzz) * KERNEL_ABS(mxxyMyzz) / (KERNEL_ABS(mxxyMyzz) + quadricLimitM);
      mxxyMyzz += wadjust * (-mxxyMyzz);
      wadjust = OxyyPxzz + (c1o1 - OxyyPxzz) * KERNEL_ABS(mxxzPyyz) / (KERNEL_ABS(mxxzPyyz) + quadricLimitP);
      mxxzPyyz += wadjust * (-mxxzPyyz);
      wadjust = OxyyMxzz + (c1o1 - OxyyMxzz) * KERNEL_ABS(mxxzMyyz) / (KERNEL_ABS(mxxzMyyz) + quadricLimitM);
      mxxzMyyz += wadjust * (-mxxzMyyz);
      wadjust = OxyyPxzz + (c1o1 - OxyyPxzz) * KERNEL_ABS(mxyyPxzz) / (KERNEL_ABS(mxyyPxzz) + quadricLimitP);
      mxyyPxzz += wadjust * (-mxyyPxzz);
      wadjust = OxyyMxzz + (c1o1 - OxyyMxzz) * KERNEL_ABS(mxyyMxzz) / (KERNEL_ABS(mxyyMxzz) + quadricLimitM);
      mxyyMxzz += wadjust * (-mxyyMxzz);
      //////////////////////////////////////////////////////////////////////////
      // no limiter
      // mfbbb += OxyyMxzz * (-mfbbb);
      // mxxyPyzz += OxyyPxzz * (-mxxyPyzz);
      // mxxyMyzz += OxyyMxzz * (-mxxyMyzz);
      // mxxzPyyz += OxyyPxzz * (-mxxzPyyz);
      // mxxzMyyz += OxyyMxzz * (-mxxzMyyz);
      // mxyyPxzz += OxyyPxzz * (-mxyyPxzz);
      // mxyyMxzz += OxyyMxzz * (-mxyyMxzz);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute inverse linear combinations of second and third order cumulants
      //!
      m200 = c1o3 * (mxxMyy + mxxMzz + mxxPyyPzz);
      m020 = c1o3 * (-c2o1 * mxxMyy + mxxMzz + mxxPyyPzz);
      m002 = c1o3 * (mxxMyy - c2o1 * mxxMzz + mxxPyyPzz);

      m210 = ( mxxyMyzz + mxxyPyzz) * c1o2;
      m012 = (-mxxyMyzz + mxxyPyzz) * c1o2;
      m201 = ( mxxzMyyz + mxxzPyyz) * c1o2;
      m021 = (-mxxzMyyz + mxxzPyyz) * c1o2;
      m120 = ( mxyyMxzz + mxyyPxzz) * c1o2;
      m102 = (-mxyyMxzz + mxyyPxzz) * c1o2;
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // 4.
      // no limiter
      //! - Relax fourth order cumulants to modified equilibrium for fourth order convergence of diffusion according
      //! to Eq. (43)-(48) <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      cm022 = -O4 * (c1o1 / omega - c1o2) * (dyuy + dzuz) * c2o3 * factorA + (c1o1 - O4) * (cm022);
      cm202 = -O4 * (c1o1 / omega - c1o2) * (dxux + dzuz) * c2o3 * factorA + (c1o1 - O4) * (cm202);
      cm220 = -O4 * (c1o1 / omega - c1o2) * (dyuy + dxux) * c2o3 * factorA + (c1o1 - O4) * (cm220);
      cm112 = -O4 * (c1o1 / omega - c1o2) * Dxy           * c1o3 * factorB + (c1o1 - O4) * (cm112);
      cm121 = -O4 * (c1o1 / omega - c1o2) * Dxz           * c1o3 * factorB + (c1o1 - O4) * (cm121);
      cm211 = -O4 * (c1o1 / omega - c1o2) * Dyz           * c1o3 * factorB + (c1o1 - O4) * (cm211);


      //////////////////////////////////////////////////////////////////////////
      // 5.
      cm122 += O5 * (-cm122);
      cm212 += O5 * (-cm212);
      cm221 += O5 * (-cm221);

      //////////////////////////////////////////////////////////////////////////
      // 6.
      cm222 += O6 * (-cm222);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute central moments from post collision cumulants according to Eq. (53)-(56) in
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!

      //////////////////////////////////////////////////////////////////////////
      // 4.
      m211 = cm211 + c1o3 * ((c3o1 * m200 + c1o1) * m011 + c6o1 * m110 * m101) * oneOverRho;
      m121 = cm121 + c1o3 * ((c3o1 * m020 + c1o1) * m101 + c6o1 * m110 * m011) * oneOverRho;
      m112 = cm112 + c1o3 * ((c3o1 * m002 + c1o1) * m110 + c6o1 * m101 * m011) * oneOverRho;

      m220 =
         cm220 + (((m200 * m020 + c2o1 * m110 * m110) * c9o1 + c3o1 * (m200 + m020)) * oneOverRho - (drho * oneOverRho)) * c1o9;
      m202 =
         cm202 + (((m200 * m002 + c2o1 * m101 * m101) * c9o1 + c3o1 * (m200 + m002)) * oneOverRho - (drho * oneOverRho)) * c1o9;
      m022 =
         cm022 + (((m002 * m020 + c2o1 * m011 * m011) * c9o1 + c3o1 * (m002 + m020)) * oneOverRho - (drho * oneOverRho)) * c1o9;

      //////////////////////////////////////////////////////////////////////////
      // 5.
      m122 = cm122 + c1o3 *
                        (c3o1 * (m002 * m120 + m020 * m102 + c4o1 * m011 * m111 + c2o1 * (m101 * m021 + m110 * m012)) +
                         (m120 + m102)) * oneOverRho;
      m212 = cm212 + c1o3 *
                        (c3o1 * (m002 * m210 + m200 * m012 + c4o1 * m101 * m111 + c2o1 * (m011 * m201 + m110 * m102)) +
                         (m210 + m012)) * oneOverRho;
      m221 = cm221 + c1o3 *
                        (c3o1 * (m200 * m021 + m020 * m201 + c4o1 * m110 * m111 + c2o1 * (m101 * m120 + m011 * m210)) +
                         (m021 + m201)) * oneOverRho;

      //////////////////////////////////////////////////////////////////////////
      // 6.
      m222 = cm222 - ((-c4o1 * m111 * m111 - (m200 * m022 + m020 * m202 + m002 * m220) -
                       c4o1 * (m011 * m211 + m101 * m121 + m110 * m112) -
                       c2o1 * (m120 * m102 + m210 * m012 + m201 * m021)) *
                         oneOverRho +
                      (c4o1 * (m101 * m101 * m020 + m011 * m011 * m200 + m110 * m110 * m002) +
                       c2o1 * (m200 * m020 * m002) + c16o1 * m110 * m101 * m011) *
                         oneOverRho * oneOverRho -
                      c1o3 * (m022 + m202 + m220) * oneOverRho - c1o9 * (m200 + m020 + m002) * oneOverRho +
                      (c2o1 * (m101 * m101 + m011 * m011 + m110 * m110) +
                       (m002 * m020 + m002 * m200 + m020 * m200) + c1o3 * (m002 + m020 + m200)) *
                         oneOverRho * oneOverRho * c2o3 +
                      c1o27 * ((drho * drho - drho) * oneOverRho * oneOverRho));

      ////////////////////////////////////////////////////////////////////////////////////
      //! -  Add acceleration (body force) to first order cumulants according to Eq. (85)-(87) in
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a>
      //!
      m100 = -m100;
      m010 = -m010;
      m001 = -m001;

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Chimera transform from central moments to well conditioned distributions as defined in Appendix J in
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a> see also Eq. (88)-(96) in <a
      //! href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017), DOI:10.1016/j.jcp.2017.05.040
      //! ]</b></a>
      //!
      ////////////////////////////////////////////////////////////////////////////////////
      // X - Dir
      backwardInverseChimeraWithK(m000, m100, m200, vvx, vx2, c1o1, c1o1);
      backwardChimera(            m010, m110, m210, vvx, vx2);
      backwardInverseChimeraWithK(m020, m120, m220, vvx, vx2, c3o1, c1o3);
      backwardChimera(            m001, m101, m201, vvx, vx2);
      backwardChimera(            m011, m111, m211, vvx, vx2);
      backwardChimera(            m021, m121, m221, vvx, vx2);
      backwardInverseChimeraWithK(m002, m102, m202, vvx, vx2, c3o1, c1o3);
      backwardChimera(            m012, m112, m212, vvx, vx2);
      backwardInverseChimeraWithK(m022, m122, m222, vvx, vx2, c9o1, c1o9);

      ////////////////////////////////////////////////////////////////////////////////////
      // Y - Dir
      backwardInverseChimeraWithK(m000, m010, m020, vvy, vy2, c6o1, c1o6);
      backwardChimera(            m001, m011, m021, vvy, vy2);
      backwardInverseChimeraWithK(m002, m012, m022, vvy, vy2, c18o1, c1o18);
      backwardInverseChimeraWithK(m100, m110, m120, vvy, vy2, c3o2, c2o3);
      backwardChimera(            m101, m111, m121, vvy, vy2);
      backwardInverseChimeraWithK(m102, m112, m122, vvy, vy2, c9o2, c2o9);
      backwardInverseChimeraWithK(m200, m210, m220, vvy, vy2, c6o1, c1o6);
      backwardChimera(            m201, m211, m221, vvy, vy2);
      backwardInverseChimeraWithK(m202, m212, m222, vvy, vy2, c18o1, c1o18);

      ////////////////////////////////////////////////////////////////////////////////////
      // Z - Dir
      backwardInverseChimeraWithK(m000, m001, m002, vvz, vz2, c36o1, c1o36);
      backwardInverseChimeraWithK(m010, m011, m012, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m020, m021, m022, vvz, vz2, c36o1, c1o36);
      backwardInverseChimeraWithK(m100, m101, m102, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m110, m111, m112, vvz, vz2, c9o4, c4o9);
      backwardInverseChimeraWithK(m120, m121, m122, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m200, m201, m202, vvz, vz2, c36o1, c1o36);
      backwardInverseChimeraWithK(m210, m211, m212, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m220, m221, m222, vvz, vz2, c36o1, c1o36);

      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = f000;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = fM00;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = fP00;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = f0M0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = f0P0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3] = f00M;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] = f00P;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = fMP0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = fPM0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = fMM0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = fPP0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3] = f0MM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] = f0PP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] = f0MP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3] = f0PM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] = fM0M;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] = fP0P;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] = fM0P;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] = fP0M;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3] = fMMM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3] = fPMM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] = fMPM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] = fPPM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] = fMMP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] = fPMP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] = fMPP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] = fPPP;

   } 
}
}

namespace internal_TestSweepCollection_kernel_streamCollideOdd {
static FUNC_PREFIX void TestSweepCollection_kernel_streamCollideOdd(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;

      const real_t c0o1 = real_t(0.0) / real_t(1.0);
      const real_t c1o1 = real_t(1.0) / real_t(1.0);
      const real_t c2o1 = real_t(2.0) / real_t(1.0);
      const real_t c3o1 = real_t(3.0) / real_t(1.0);
      const real_t c4o1 = real_t(4.0) / real_t(1.0);
      const real_t c5o1 = real_t(5.0) / real_t(1.0);
      const real_t c6o1 = real_t(6.0) / real_t(1.0);
      const real_t c7o1 = real_t(7.0) / real_t(1.0);
      const real_t c8o1 = real_t(8.0) / real_t(1.0);
      const real_t c9o1 = real_t(9.0) / real_t(1.0);
      const real_t c14o1 = real_t(14.0) / real_t(1.0);
      const real_t c15o1 = real_t(15.0) / real_t(1.0);
      const real_t c16o1 = real_t(16.0) / real_t(1.0);
      const real_t c18o1 = real_t(18.0) / real_t(1.0);
      const real_t c21o1 = real_t(21.0) / real_t(1.0);
      const real_t c24o1 = real_t(24.0) / real_t(1.0);
      const real_t c28o1 = real_t(28.0) / real_t(1.0);
      const real_t c29o1 = real_t(29.0) / real_t(1.0);
      const real_t c36o1 = real_t(36.0) / real_t(1.0);
      const real_t c48o1 = real_t(48.0) / real_t(1.0);
      const real_t c50o1 = real_t(50.0) / real_t(1.0);
      const real_t c56o1 = real_t(56.0) / real_t(1.0);
      const real_t c130o1 = real_t(130.0) / real_t(1.0);
      const real_t c152o1 = real_t(152.0) / real_t(1.0);

      const real_t c1o2 = real_t(1.0) / real_t(2.0);
      const real_t c3o2 = real_t(3.0) / real_t(2.0);
      const real_t c9o2 = real_t(9.0) / real_t(2.0);

      const real_t c9o4 = real_t(9.0) / real_t(4.0);

      const real_t c1o3 = real_t(1.0) / real_t(3.0);
      const real_t c2o3 = real_t(2.0) / real_t(3.0);
      const real_t c2o9 = real_t(2.0) / real_t(9.0);
      const real_t c4o9 = real_t(4.0) / real_t(9.0);

      const real_t c1o4 = real_t(1.0) / real_t(4.0);
      const real_t c1o6 = real_t(1.0) / real_t(6.0);
      const real_t c1o8 = real_t(1.0) / real_t(8.0);
      const real_t c1o9 = real_t(1.0) / real_t(9.0);
      const real_t c1o16 = real_t(1.0) / real_t(16.0);
      const real_t c1o18 = real_t(1.0) / real_t(18.0);
      const real_t c1o27 = real_t(1.0) / real_t(27.0);
      const real_t c1o36 = real_t(1.0) / real_t(36.0);
      const real_t c1o64 = real_t(1.0) / real_t(64.0);

      real_t& f000 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      real_t& fM00 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      real_t& fP00 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      real_t& f0M0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      real_t& f0P0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      real_t& f00M = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3];
      real_t& f00P = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3];
      real_t& fMP0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      real_t& fPM0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      real_t& fMM0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      real_t& fPP0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      real_t& f0MM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3];
      real_t& f0PP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3];
      real_t& f0MP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3];
      real_t& f0PM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3];
      real_t& fM0M = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3];
      real_t& fP0P = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3];
      real_t& fM0P = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3];
      real_t& fP0M = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3];
      real_t& fMMM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3];
      real_t& fPMM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3];
      real_t& fMPM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3];
      real_t& fPPM = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3];
      real_t& fMMP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3];
      real_t& fPMP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3];
      real_t& fMPP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3];
      real_t& fPPP = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3];

      real_t& m111 = f000;
      real_t& m211 = fP00;
      real_t& m011 = fM00;
      real_t& m121 = f0P0;
      real_t& m101 = f0M0;
      real_t& m112 = f00P;
      real_t& m110 = f00M;
      real_t& m221 = fPP0;
      real_t& m001 = fMM0;
      real_t& m201 = fPM0;
      real_t& m021 = fMP0;
      real_t& m212 = fP0P;
      real_t& m010 = fM0M;
      real_t& m210 = fP0M;
      real_t& m012 = fM0P;
      real_t& m122 = f0PP;
      real_t& m100 = f0MM;
      real_t& m120 = f0PM;
      real_t& m102 = f0MP;
      real_t& m222 = fPPP;
      real_t& m022 = fMPP;
      real_t& m202 = fPMP;
      real_t& m002 = fMMP;
      real_t& m220 = fPPM;
      real_t& m020 = fMPM;
      real_t& m200 = fPMM;
      real_t& m000 = fMMM;


      real_t drho;
      real_t oneOverRho;
      real_t vvx;
      real_t vvy;
      real_t vvz;

      drho = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3])) +
               ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3]))) +
              (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3])) +
               ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3])) +
               ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3]))) +
              _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2]) +
             ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3]));

      oneOverRho = real_t(1.0) / (drho + real_t(1.0));

      vvx = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3]))) +
             (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3]))) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3]));

      vvy = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3]))) +
             (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3]))) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3]));

      vvz = ((((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3]))) +
             (((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3])) + ((_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3]) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3]))) + (_data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3]));

      vvx *= oneOverRho;
      vvy *= oneOverRho;
      vvz *= oneOverRho;

      ////////////////////////////////////////////////////////////////////////////////////
      // calculate the square of velocities for this lattice node
      real_t vx2 = vvx * vvx;
      real_t vy2 = vvy * vvy;
      real_t vz2 = vvz * vvz;
      ////////////////////////////////////////////////////////////////////////////////////
      //! - Set relaxation limiters for third order cumulants to default value \f$ \lambda=0.001 \f$ according to
      //! section 6 in \ref <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      real_t quadricLimitP = 0.01;
      real_t quadricLimitM = 0.01;
      real_t quadricLimitD = 0.01;
      ////////////////////////////////////////////////////////////////////////////////////
      //! - Chimera transform from well conditioned distributions to central moments as defined in Appendix J in \ref
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a> see also Eq. (6)-(14) in \ref <a
      //! href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017), DOI:10.1016/j.jcp.2017.05.040
      //! ]</b></a>
      //!
      ////////////////////////////////////////////////////////////////////////////////////
      // Z - Dir
      forwardInverseChimeraWithK(fMMM, fMM0, fMMP, vvz, vz2, c36o1, c1o36);
      forwardInverseChimeraWithK(fM0M, fM00, fM0P, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(fMPM, fMP0, fMPP, vvz, vz2, c36o1, c1o36);
      forwardInverseChimeraWithK(f0MM, f0M0, f0MP, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(f00M, f000, f00P, vvz, vz2, c9o4,  c4o9);
      forwardInverseChimeraWithK(f0PM, f0P0, f0PP, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(fPMM, fPM0, fPMP, vvz, vz2, c36o1, c1o36);
      forwardInverseChimeraWithK(fP0M, fP00, fP0P, vvz, vz2, c9o1,  c1o9);
      forwardInverseChimeraWithK(fPPM, fPP0, fPPP, vvz, vz2, c36o1, c1o36);

      ////////////////////////////////////////////////////////////////////////////////////
      // Y - Dir
      forwardInverseChimeraWithK(fMMM, fM0M, fMPM, vvy, vy2, c6o1,  c1o6);
      forwardChimera(            fMM0, fM00, fMP0, vvy, vy2);
      forwardInverseChimeraWithK(fMMP, fM0P, fMPP, vvy, vy2, c18o1, c1o18);
      forwardInverseChimeraWithK(f0MM, f00M, f0PM, vvy, vy2, c3o2,  c2o3);
      forwardChimera(            f0M0, f000, f0P0, vvy, vy2);
      forwardInverseChimeraWithK(f0MP, f00P, f0PP, vvy, vy2, c9o2,  c2o9);
      forwardInverseChimeraWithK(fPMM, fP0M, fPPM, vvy, vy2, c6o1,  c1o6);
      forwardChimera(            fPM0, fP00, fPP0, vvy, vy2);
      forwardInverseChimeraWithK(fPMP, fP0P, fPPP, vvy, vy2, c18o1, c1o18);

      ////////////////////////////////////////////////////////////////////////////////////
      // X - Dir
      forwardInverseChimeraWithK(fMMM, f0MM, fPMM, vvx, vx2, c1o1, c1o1);
      forwardChimera(            fM0M, f00M, fP0M, vvx, vx2);
      forwardInverseChimeraWithK(fMPM, f0PM, fPPM, vvx, vx2, c3o1, c1o3);
      forwardChimera(            fMM0, f0M0, fPM0, vvx, vx2);
      forwardChimera(            fM00, f000, fP00, vvx, vx2);
      forwardChimera(            fMP0, f0P0, fPP0, vvx, vx2);
      forwardInverseChimeraWithK(fMMP, f0MP, fPMP, vvx, vx2, c3o1, c1o3);
      forwardChimera(            fM0P, f00P, fP0P, vvx, vx2);
      forwardInverseChimeraWithK(fMPP, f0PP, fPPP, vvx, vx2, c3o1, c1o9);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Setting relaxation rates for non-hydrodynamic cumulants (default values). Variable names and equations
      //! according to <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!  => [NAME IN PAPER]=[NAME IN CODE]=[DEFAULT VALUE].
      //!  - Trace of second order cumulants \f$ C{200}+C{020}+C{002} \f$ used to adjust bulk
      //!  viscosity:\f$\omega2=OxxPyyPzz=1.0 \f$.
      //!  - Third order cumulants \f$ C{120}+C{102}, C{210}+C{012}, C{201}+C{021} \f$: \f$ \omega3=OxyyPxzz
      //!  \f$ set according to Eq. (111) with simplifications assuming \f$ \omega2=1.0\f$.
      //!  - Third order cumulants \f$ C{120}-C{102}, C{210}-C{012}, C{201}-C{021} \f$: \f$ \omega4 = OxyyMxzz
      //!  \f$ set according to Eq. (112) with simplifications assuming \f$ \omega2 = 1.0\f$.
      //!  - Third order cumulants \f$ C{111} \f$: \f$ \omega5 = Oxyz \f$ set according to Eq. (113) with
      //!  simplifications assuming \f$ \omega2 = 1.0\f$  (modify for different bulk viscosity).
      //!  - Fourth order cumulants \f$ C{220}, C{202}, C{022}, C{211}, C{121}, C{112} \f$: for simplification
      //!  all set to the same default value \f$ \omega6=\omega7=\omega8=O4=1.0 \f$.
      //!  - Fifth order cumulants \f$ C{221}, C{212}, C{122}\f$: \f$\omega9=O5=1.0\f$.
      //!  - Sixth order cumulant \f$ C{222}\f$: \f$\omega{10}=O6=1.0\f$.
      //!
      ////////////////////////////////////////////////////////////////////////////////////
      //! - Calculate modified omega with turbulent viscosity
      //!////////////////////////////////////////////////////////////
      // 2.
      real_t OxxPyyPzz = c1o1;
      ////////////////////////////////////////////////////////////
      // 3.
      real_t OxyyPxzz = c8o1 * (-c2o1 + omega) * (c1o1 + c2o1 * omega) / (-c8o1 - c14o1 * omega + c7o1 * omega * omega);
      real_t OxyyMxzz =
         c8o1 * (-c2o1 + omega) * (-c7o1 + c4o1 * omega) / (c56o1 - c50o1 * omega + c9o1 * omega * omega);
      real_t Oxyz = c24o1 * (-c2o1 + omega) * (-c2o1 - c7o1 * omega + c3o1 * omega * omega) /
                    (c48o1 + c152o1 * omega - c130o1 * omega * omega + c29o1 * omega * omega * omega);
      ////////////////////////////////////////////////////////////
      // 4.
      real_t O4 = c1o1;
      ////////////////////////////////////////////////////////////
      // 5.
      real_t O5 = c1o1;
      ////////////////////////////////////////////////////////////
      // 6.
      real_t O6 = c1o1;

      ////////////////////////////////////////////////////////////////////////////////////
      //! - A and d00M: parameters for fourth order convergence of the diffusion term according to Eq. (115) and (116)
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a> with simplifications assuming \f$ \omega_2 = 1.0 \f$ (modify for
      //! different bulk viscosity).
      //!
      real_t factorA = (c4o1 + c2o1 * omega - c3o1 * omega * omega) / (c2o1 - c7o1 * omega + c5o1 * omega * omega);
      real_t factorB = (c4o1 + c28o1 * omega - c14o1 * omega * omega) / (c6o1 - c21o1 * omega + c15o1 * omega * omega);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute cumulants from central moments according to Eq. (20)-(23) in
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      ////////////////////////////////////////////////////////////
      // 4.
      real_t cm211 = m211 - ((m200 + c1o3) * m011 + c2o1 * m110 * m101) * oneOverRho;
      real_t cm121 = m121 - ((m020 + c1o3) * m101 + c2o1 * m110 * m011) * oneOverRho;
      real_t cm112 = m112 - ((m002 + c1o3) * m110 + c2o1 * m101 * m011) * oneOverRho;

      real_t cm220 = m220 - (((m200 * m020 + c2o1 * m110 * m110) + c1o3 * (m200 + m020)) * oneOverRho - c1o9 * (drho * oneOverRho));
      real_t cm202 = m202 - (((m200 * m002 + c2o1 * m101 * m101) + c1o3 * (m200 + m002)) * oneOverRho - c1o9 * (drho * oneOverRho));
      real_t cm022 = m022 - (((m002 * m020 + c2o1 * m011 * m011) + c1o3 * (m002 + m020)) * oneOverRho - c1o9 * (drho * oneOverRho));
      ////////////////////////////////////////////////////////////
      // 5.
      real_t cm122 =
         m122 - ((m002 * m120 + m020 * m102 + c4o1 * m011 * m111 + c2o1 * (m101 * m021 + m110 * m012)) +
                 c1o3 * (m120 + m102)) *
                   oneOverRho;
      real_t cm212 =
         m212 - ((m002 * m210 + m200 * m012 + c4o1 * m101 * m111 + c2o1 * (m011 * m201 + m110 * m102)) +
                 c1o3 * (m210 + m012)) *
                   oneOverRho;
      real_t cm221 =
         m221 - ((m200 * m021 + m020 * m201 + c4o1 * m110 * m111 + c2o1 * (m101 * m120 + m011 * m210)) +
                 c1o3 * (m021 + m201)) *
                   oneOverRho;
      ////////////////////////////////////////////////////////////
      // 6.
      real_t cm222 = m222 + ((-c4o1 * m111 * m111 - (m200 * m022 + m020 * m202 + m002 * m220) -
                              c4o1 * (m011 * m211 + m101 * m121 + m110 * m112) -
                              c2o1 * (m120 * m102 + m210 * m012 + m201 * m021)) *
                                oneOverRho +
                             (c4o1 * (m101 * m101 * m020 + m011 * m011 * m200 + m110 * m110 * m002) +
                              c2o1 * (m200 * m020 * m002) + c16o1 * m110 * m101 * m011) *
                                oneOverRho * oneOverRho -
                             c1o3 * (m022 + m202 + m220) * oneOverRho - c1o9 * (m200 + m020 + m002) * oneOverRho +
                             (c2o1 * (m101 * m101 + m011 * m011 + m110 * m110) +
                              (m002 * m020 + m002 * m200 + m020 * m200) + c1o3 * (m002 + m020 + m200)) *
                                oneOverRho * oneOverRho * c2o3 +
                             c1o27 * ((drho * drho - drho) * oneOverRho * oneOverRho));

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute linear combinations of second and third order cumulants
      //!
      ////////////////////////////////////////////////////////////
      // 2.
      real_t mxxPyyPzz = m200 + m020 + m002;
      real_t mxxMyy    = m200 - m020;
      real_t mxxMzz    = m200 - m002;
      ////////////////////////////////////////////////////////////
      // 3.
      real_t mxxyPyzz = m210 + m012;
      real_t mxxyMyzz = m210 - m012;

      real_t mxxzPyyz = m201 + m021;
      real_t mxxzMyyz = m201 - m021;

      real_t mxyyPxzz = m120 + m102;
      real_t mxyyMxzz = m120 - m102;

      ////////////////////////////////////////////////////////////////////////////////////
      // incl. correction
      ////////////////////////////////////////////////////////////
      //! - Compute velocity  gradients from second order cumulants according to Eq. (27)-(32)
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a> Further explanations of the correction in viscosity in Appendix H of
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a> Note that the division by rho is omitted here as we need rho times
      //! the gradients later.
      //!
      real_t Dxy = -c3o1 * omega * m110;
      real_t Dxz = -c3o1 * omega * m101;
      real_t Dyz = -c3o1 * omega * m011;
      real_t dxux = c1o2 * (-omega) * (mxxMyy + mxxMzz) + c1o2 * OxxPyyPzz * (m000 - mxxPyyPzz);
      real_t dyuy = dxux + omega * c3o2 * mxxMyy;
      real_t dzuz = dxux + omega * c3o2 * mxxMzz;


      ////////////////////////////////////////////////////////////
      //! - Relaxation of second order cumulants with correction terms according to Eq. (33)-(35) in
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      mxxPyyPzz += OxxPyyPzz * (m000 - mxxPyyPzz) - c3o1 * (c1o1 - c1o2 * OxxPyyPzz) * (vx2 * dxux + vy2 * dyuy + vz2 * dzuz);
      mxxMyy += omega * (-mxxMyy) - c3o1 * (c1o1 + c1o2 * (-omega)) * (vx2 * dxux - vy2 * dyuy);
      mxxMzz += omega * (-mxxMzz) - c3o1 * (c1o1 + c1o2 * (-omega)) * (vx2 * dxux - vz2 * dzuz);

      ////////////////////////////////////////////////////////////////////////////////////
      ////no correction
      // mxxPyyPzz += OxxPyyPzz*(mfaaa - mxxPyyPzz);
      // mxxMyy += -(-omega) * (-mxxMyy);
      // mxxMzz += -(-omega) * (-mxxMzz);
      //////////////////////////////////////////////////////////////////////////
      m011 += omega * (-m011);
      m101 += omega * (-m101);
      m110 += omega * (-m110);

      ////////////////////////////////////////////////////////////////////////////////////
      // relax
      //////////////////////////////////////////////////////////////////////////
      // incl. limiter
      //! - Relaxation of third order cumulants including limiter according to Eq. (116)-(123)
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      real_t wadjust = Oxyz + (c1o1 - Oxyz) * KERNEL_ABS(m111) / (KERNEL_ABS(m111) + quadricLimitD);
      m111 += wadjust * (-m111);
      wadjust = OxyyPxzz + (c1o1 - OxyyPxzz) * KERNEL_ABS(mxxyPyzz) / (KERNEL_ABS(mxxyPyzz) + quadricLimitP);
      mxxyPyzz += wadjust * (-mxxyPyzz);
      wadjust = OxyyMxzz + (c1o1 - OxyyMxzz) * KERNEL_ABS(mxxyMyzz) / (KERNEL_ABS(mxxyMyzz) + quadricLimitM);
      mxxyMyzz += wadjust * (-mxxyMyzz);
      wadjust = OxyyPxzz + (c1o1 - OxyyPxzz) * KERNEL_ABS(mxxzPyyz) / (KERNEL_ABS(mxxzPyyz) + quadricLimitP);
      mxxzPyyz += wadjust * (-mxxzPyyz);
      wadjust = OxyyMxzz + (c1o1 - OxyyMxzz) * KERNEL_ABS(mxxzMyyz) / (KERNEL_ABS(mxxzMyyz) + quadricLimitM);
      mxxzMyyz += wadjust * (-mxxzMyyz);
      wadjust = OxyyPxzz + (c1o1 - OxyyPxzz) * KERNEL_ABS(mxyyPxzz) / (KERNEL_ABS(mxyyPxzz) + quadricLimitP);
      mxyyPxzz += wadjust * (-mxyyPxzz);
      wadjust = OxyyMxzz + (c1o1 - OxyyMxzz) * KERNEL_ABS(mxyyMxzz) / (KERNEL_ABS(mxyyMxzz) + quadricLimitM);
      mxyyMxzz += wadjust * (-mxyyMxzz);
      //////////////////////////////////////////////////////////////////////////
      // no limiter
      // mfbbb += OxyyMxzz * (-mfbbb);
      // mxxyPyzz += OxyyPxzz * (-mxxyPyzz);
      // mxxyMyzz += OxyyMxzz * (-mxxyMyzz);
      // mxxzPyyz += OxyyPxzz * (-mxxzPyyz);
      // mxxzMyyz += OxyyMxzz * (-mxxzMyyz);
      // mxyyPxzz += OxyyPxzz * (-mxyyPxzz);
      // mxyyMxzz += OxyyMxzz * (-mxyyMxzz);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute inverse linear combinations of second and third order cumulants
      //!
      m200 = c1o3 * (mxxMyy + mxxMzz + mxxPyyPzz);
      m020 = c1o3 * (-c2o1 * mxxMyy + mxxMzz + mxxPyyPzz);
      m002 = c1o3 * (mxxMyy - c2o1 * mxxMzz + mxxPyyPzz);

      m210 = ( mxxyMyzz + mxxyPyzz) * c1o2;
      m012 = (-mxxyMyzz + mxxyPyzz) * c1o2;
      m201 = ( mxxzMyyz + mxxzPyyz) * c1o2;
      m021 = (-mxxzMyyz + mxxzPyyz) * c1o2;
      m120 = ( mxyyMxzz + mxyyPxzz) * c1o2;
      m102 = (-mxyyMxzz + mxyyPxzz) * c1o2;
      //////////////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////////////
      // 4.
      // no limiter
      //! - Relax fourth order cumulants to modified equilibrium for fourth order convergence of diffusion according
      //! to Eq. (43)-(48) <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!
      cm022 = -O4 * (c1o1 / omega - c1o2) * (dyuy + dzuz) * c2o3 * factorA + (c1o1 - O4) * (cm022);
      cm202 = -O4 * (c1o1 / omega - c1o2) * (dxux + dzuz) * c2o3 * factorA + (c1o1 - O4) * (cm202);
      cm220 = -O4 * (c1o1 / omega - c1o2) * (dyuy + dxux) * c2o3 * factorA + (c1o1 - O4) * (cm220);
      cm112 = -O4 * (c1o1 / omega - c1o2) * Dxy           * c1o3 * factorB + (c1o1 - O4) * (cm112);
      cm121 = -O4 * (c1o1 / omega - c1o2) * Dxz           * c1o3 * factorB + (c1o1 - O4) * (cm121);
      cm211 = -O4 * (c1o1 / omega - c1o2) * Dyz           * c1o3 * factorB + (c1o1 - O4) * (cm211);


      //////////////////////////////////////////////////////////////////////////
      // 5.
      cm122 += O5 * (-cm122);
      cm212 += O5 * (-cm212);
      cm221 += O5 * (-cm221);

      //////////////////////////////////////////////////////////////////////////
      // 6.
      cm222 += O6 * (-cm222);

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Compute central moments from post collision cumulants according to Eq. (53)-(56) in
      //! <a href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017),
      //! DOI:10.1016/j.jcp.2017.05.040 ]</b></a>
      //!

      //////////////////////////////////////////////////////////////////////////
      // 4.
      m211 = cm211 + c1o3 * ((c3o1 * m200 + c1o1) * m011 + c6o1 * m110 * m101) * oneOverRho;
      m121 = cm121 + c1o3 * ((c3o1 * m020 + c1o1) * m101 + c6o1 * m110 * m011) * oneOverRho;
      m112 = cm112 + c1o3 * ((c3o1 * m002 + c1o1) * m110 + c6o1 * m101 * m011) * oneOverRho;

      m220 =
         cm220 + (((m200 * m020 + c2o1 * m110 * m110) * c9o1 + c3o1 * (m200 + m020)) * oneOverRho - (drho * oneOverRho)) * c1o9;
      m202 =
         cm202 + (((m200 * m002 + c2o1 * m101 * m101) * c9o1 + c3o1 * (m200 + m002)) * oneOverRho - (drho * oneOverRho)) * c1o9;
      m022 =
         cm022 + (((m002 * m020 + c2o1 * m011 * m011) * c9o1 + c3o1 * (m002 + m020)) * oneOverRho - (drho * oneOverRho)) * c1o9;

      //////////////////////////////////////////////////////////////////////////
      // 5.
      m122 = cm122 + c1o3 *
                        (c3o1 * (m002 * m120 + m020 * m102 + c4o1 * m011 * m111 + c2o1 * (m101 * m021 + m110 * m012)) +
                         (m120 + m102)) * oneOverRho;
      m212 = cm212 + c1o3 *
                        (c3o1 * (m002 * m210 + m200 * m012 + c4o1 * m101 * m111 + c2o1 * (m011 * m201 + m110 * m102)) +
                         (m210 + m012)) * oneOverRho;
      m221 = cm221 + c1o3 *
                        (c3o1 * (m200 * m021 + m020 * m201 + c4o1 * m110 * m111 + c2o1 * (m101 * m120 + m011 * m210)) +
                         (m021 + m201)) * oneOverRho;

      //////////////////////////////////////////////////////////////////////////
      // 6.
      m222 = cm222 - ((-c4o1 * m111 * m111 - (m200 * m022 + m020 * m202 + m002 * m220) -
                       c4o1 * (m011 * m211 + m101 * m121 + m110 * m112) -
                       c2o1 * (m120 * m102 + m210 * m012 + m201 * m021)) *
                         oneOverRho +
                      (c4o1 * (m101 * m101 * m020 + m011 * m011 * m200 + m110 * m110 * m002) +
                       c2o1 * (m200 * m020 * m002) + c16o1 * m110 * m101 * m011) *
                         oneOverRho * oneOverRho -
                      c1o3 * (m022 + m202 + m220) * oneOverRho - c1o9 * (m200 + m020 + m002) * oneOverRho +
                      (c2o1 * (m101 * m101 + m011 * m011 + m110 * m110) +
                       (m002 * m020 + m002 * m200 + m020 * m200) + c1o3 * (m002 + m020 + m200)) *
                         oneOverRho * oneOverRho * c2o3 +
                      c1o27 * ((drho * drho - drho) * oneOverRho * oneOverRho));

      ////////////////////////////////////////////////////////////////////////////////////
      //! -  Add acceleration (body force) to first order cumulants according to Eq. (85)-(87) in
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a>
      //!
      m100 = -m100;
      m010 = -m010;
      m001 = -m001;

      ////////////////////////////////////////////////////////////////////////////////////
      //! - Chimera transform from central moments to well conditioned distributions as defined in Appendix J in
      //! <a href="https://doi.org/10.1016/j.camwa.2015.05.001"><b>[ M. Geier et al. (2015),
      //! DOI:10.1016/j.camwa.2015.05.001 ]</b></a> see also Eq. (88)-(96) in <a
      //! href="https://doi.org/10.1016/j.jcp.2017.05.040"><b>[ M. Geier et al. (2017), DOI:10.1016/j.jcp.2017.05.040
      //! ]</b></a>
      //!
      ////////////////////////////////////////////////////////////////////////////////////
      // X - Dir
      backwardInverseChimeraWithK(m000, m100, m200, vvx, vx2, c1o1, c1o1);
      backwardChimera(            m010, m110, m210, vvx, vx2);
      backwardInverseChimeraWithK(m020, m120, m220, vvx, vx2, c3o1, c1o3);
      backwardChimera(            m001, m101, m201, vvx, vx2);
      backwardChimera(            m011, m111, m211, vvx, vx2);
      backwardChimera(            m021, m121, m221, vvx, vx2);
      backwardInverseChimeraWithK(m002, m102, m202, vvx, vx2, c3o1, c1o3);
      backwardChimera(            m012, m112, m212, vvx, vx2);
      backwardInverseChimeraWithK(m022, m122, m222, vvx, vx2, c9o1, c1o9);

      ////////////////////////////////////////////////////////////////////////////////////
      // Y - Dir
      backwardInverseChimeraWithK(m000, m010, m020, vvy, vy2, c6o1, c1o6);
      backwardChimera(            m001, m011, m021, vvy, vy2);
      backwardInverseChimeraWithK(m002, m012, m022, vvy, vy2, c18o1, c1o18);
      backwardInverseChimeraWithK(m100, m110, m120, vvy, vy2, c3o2, c2o3);
      backwardChimera(            m101, m111, m121, vvy, vy2);
      backwardInverseChimeraWithK(m102, m112, m122, vvy, vy2, c9o2, c2o9);
      backwardInverseChimeraWithK(m200, m210, m220, vvy, vy2, c6o1, c1o6);
      backwardChimera(            m201, m211, m221, vvy, vy2);
      backwardInverseChimeraWithK(m202, m212, m222, vvy, vy2, c18o1, c1o18);

      ////////////////////////////////////////////////////////////////////////////////////
      // Z - Dir
      backwardInverseChimeraWithK(m000, m001, m002, vvz, vz2, c36o1, c1o36);
      backwardInverseChimeraWithK(m010, m011, m012, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m020, m021, m022, vvz, vz2, c36o1, c1o36);
      backwardInverseChimeraWithK(m100, m101, m102, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m110, m111, m112, vvz, vz2, c9o4, c4o9);
      backwardInverseChimeraWithK(m120, m121, m122, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m200, m201, m202, vvz, vz2, c36o1, c1o36);
      backwardInverseChimeraWithK(m210, m211, m212, vvz, vz2, c9o1, c1o9);
      backwardInverseChimeraWithK(m220, m221, m222, vvz, vz2, c36o1, c1o36);

      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = f000;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = fP00;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = fM00;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = f0P0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = f0M0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3] = f00P;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] = f00M;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = fPP0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = fMM0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = fPM0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = fMP0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] = fP0P;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3] = fM0M;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3] = fP0M;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] = fM0P;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] = f0PP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] = f0MM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] = f0PM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] = f0MP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] = fPPP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] = fMPP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] = fPMP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3] = fMMP;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] = fPPM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] = fMPM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] = fPMM;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] = fMMM;
   } 
}
}


namespace internal_TestSweepCollection_kernel_collideOdd {
static FUNC_PREFIX void TestSweepCollection_kernel_collideOdd(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double xi_53 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3];
      const double xi_54 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double xi_55 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      const double xi_56 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3];
      const double xi_57 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      const double xi_58 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3];
      const double xi_59 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3];
      const double xi_60 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3];
      const double xi_61 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      const double xi_62 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      const double xi_63 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3];
      const double xi_64 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3];
      const double xi_65 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3];
      const double xi_66 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3];
      const double xi_67 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3];
      const double xi_68 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3];
      const double xi_69 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3];
      const double xi_70 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      const double xi_71 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double xi_72 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3];
      const double xi_73 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3];
      const double xi_74 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3];
      const double xi_75 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      const double xi_76 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      const double xi_77 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3];
      const double xi_78 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3];
      const double xi_79 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3];
      const double xi_3 = ((1.0) / (omega*(omega*15.0 - 28.0)*(omega*3.0 - 10.0) + omega*(omega*(omega*9.0 - 46.0)*5.0 + 216.0)*-2.0 + (omega - 6.0)*16.0*(omega*omega) - 48.0));
      const double xi_4 = ((1.0) / (omega*-5.0 + 2.0));
      const double xi_5 = ((1.0) / (omega*-50.0 + 56.0 + 9.0*(omega*omega)));
      const double xi_6 = ((1.0) / (omega - 1.0));
      const double xi_7 = ((1.0) / (omega*(omega*-16.0 + 40.0) + omega*(omega*9.0 - 26.0) + 8.0));
      const double xi_9 = ((1.0) / (omega));
      const double partial_m_m1_m1_e_0 = xi_55 + xi_56 + xi_63;
      const double partial_m_m1_0_e_0 = xi_57 + xi_66 + xi_73;
      const double partial_m_m1_1_e_0 = xi_58 + xi_69 + xi_76;
      const double partial_m_m1_e_0_0 = partial_m_m1_0_e_0 + partial_m_m1_1_e_0 + partial_m_m1_m1_e_0;
      const double partial_m_0_m1_e_0 = xi_64 + xi_75 + xi_77;
      const double partial_m_0_0_e_0 = xi_71 + xi_74 + xi_78;
      const double partial_m_0_1_e_0 = xi_54 + xi_67 + xi_79;
      const double partial_m_0_e_0_0 = partial_m_0_0_e_0 + partial_m_0_1_e_0 + partial_m_0_m1_e_0;
      const double partial_m_1_m1_e_0 = xi_60 + xi_70 + xi_72;
      const double partial_m_1_0_e_0 = xi_53 + xi_59 + xi_62;
      const double partial_m_1_1_e_0 = xi_61 + xi_65 + xi_68;
      const double partial_m_1_e_0_0 = partial_m_1_0_e_0 + partial_m_1_1_e_0 + partial_m_1_m1_e_0;
      const double partial_m_m1_e_1_0 = partial_m_m1_1_e_0 - partial_m_m1_m1_e_0;
      const double partial_m_0_e_1_0 = partial_m_0_1_e_0 - partial_m_0_m1_e_0;
      const double partial_m_1_e_1_0 = partial_m_1_1_e_0 - partial_m_1_m1_e_0;
      const double partial_m_m1_m1_e_1 = xi_56 - xi_63;
      const double partial_m_m1_0_e_1 = -xi_66 + xi_73;
      const double partial_m_m1_1_e_1 = -xi_58 + xi_69;
      const double partial_m_m1_e_0_1 = partial_m_m1_0_e_1 + partial_m_m1_1_e_1 + partial_m_m1_m1_e_1;
      const double partial_m_0_m1_e_1 = xi_64 - xi_77;
      const double partial_m_0_0_e_1 = xi_74 - xi_78;
      const double partial_m_0_1_e_1 = xi_67 - xi_79;
      const double partial_m_0_e_0_1 = partial_m_0_0_e_1 + partial_m_0_1_e_1 + partial_m_0_m1_e_1;
      const double partial_m_1_m1_e_1 = -xi_60 + xi_72;
      const double partial_m_1_0_e_1 = -xi_53 + xi_59;
      const double partial_m_1_1_e_1 = xi_65 - xi_68;
      const double partial_m_1_e_0_1 = partial_m_1_0_e_1 + partial_m_1_1_e_1 + partial_m_1_m1_e_1;
      const double partial_m_m1_e_2_0 = partial_m_m1_1_e_0 + partial_m_m1_m1_e_0;
      const double partial_m_0_e_2_0 = partial_m_0_1_e_0 + partial_m_0_m1_e_0;
      const double partial_m_1_e_2_0 = partial_m_1_1_e_0 + partial_m_1_m1_e_0;
      const double partial_m_m1_m1_e_2 = xi_56 + xi_63;
      const double partial_m_m1_0_e_2 = xi_66 + xi_73;
      const double partial_m_m1_1_e_2 = xi_58 + xi_69;
      const double partial_m_m1_e_0_2 = partial_m_m1_0_e_2 + partial_m_m1_1_e_2 + partial_m_m1_m1_e_2;
      const double partial_m_0_m1_e_2 = xi_64 + xi_77;
      const double partial_m_0_0_e_2 = xi_74 + xi_78;
      const double partial_m_0_1_e_2 = xi_67 + xi_79;
      const double partial_m_0_e_0_2 = partial_m_0_0_e_2 + partial_m_0_1_e_2 + partial_m_0_m1_e_2;
      const double partial_m_1_m1_e_2 = xi_60 + xi_72;
      const double partial_m_1_0_e_2 = xi_53 + xi_59;
      const double partial_m_1_1_e_2 = xi_65 + xi_68;
      const double partial_m_1_e_0_2 = partial_m_1_0_e_2 + partial_m_1_1_e_2 + partial_m_1_m1_e_2;
      const double partial_m_m1_e_1_1 = partial_m_m1_1_e_1 - partial_m_m1_m1_e_1;
      const double partial_m_0_e_1_1 = partial_m_0_1_e_1 - partial_m_0_m1_e_1;
      const double partial_m_1_e_1_1 = partial_m_1_1_e_1 - partial_m_1_m1_e_1;
      const double partial_m_m1_e_2_1 = partial_m_m1_1_e_1 + partial_m_m1_m1_e_1;
      const double partial_m_0_e_2_1 = partial_m_0_1_e_1 + partial_m_0_m1_e_1;
      const double partial_m_1_e_2_1 = partial_m_1_1_e_1 + partial_m_1_m1_e_1;
      const double partial_m_m1_e_1_2 = partial_m_m1_1_e_2 - partial_m_m1_m1_e_2;
      const double partial_m_0_e_1_2 = partial_m_0_1_e_2 - partial_m_0_m1_e_2;
      const double partial_m_1_e_1_2 = partial_m_1_1_e_2 - partial_m_1_m1_e_2;
      const double m_000 = partial_m_0_e_0_0 + partial_m_1_e_0_0 + partial_m_m1_e_0_0 + 1.0;
      const double xi_8 = ((1.0) / (m_000));
      const double xi_10 = ((1.0) / (m_000*m_000));
      const double m_100 = partial_m_1_e_0_0 - partial_m_m1_e_0_0;
      const double u_0 = m_100*xi_8;
      const double m_010 = partial_m_0_e_1_0 + partial_m_1_e_1_0 + partial_m_m1_e_1_0;
      const double u_1 = m_010*xi_8;
      const double m_001 = partial_m_0_e_0_1 + partial_m_1_e_0_1 + partial_m_m1_e_0_1;
      const double u_2 = m_001*xi_8;
      const double m_200 = partial_m_1_e_0_0 + partial_m_m1_e_0_0 + 0.33333333333333331;
      const double m_020 = partial_m_0_e_2_0 + partial_m_1_e_2_0 + partial_m_m1_e_2_0 + 0.33333333333333331;
      const double m_002 = partial_m_0_e_0_2 + partial_m_1_e_0_2 + partial_m_m1_e_0_2 + 0.33333333333333331;
      const double m_110 = partial_m_1_e_1_0 - partial_m_m1_e_1_0;
      const double m_101 = partial_m_1_e_0_1 - partial_m_m1_e_0_1;
      const double m_011 = partial_m_0_e_1_1 + partial_m_1_e_1_1 + partial_m_m1_e_1_1;
      const double m_210 = partial_m_1_e_1_0 + partial_m_m1_e_1_0;
      const double m_201 = partial_m_1_e_0_1 + partial_m_m1_e_0_1;
      const double m_120 = partial_m_1_e_2_0 - partial_m_m1_e_2_0;
      const double m_102 = partial_m_1_e_0_2 - partial_m_m1_e_0_2;
      const double m_021 = partial_m_0_e_2_1 + partial_m_1_e_2_1 + partial_m_m1_e_2_1;
      const double m_012 = partial_m_0_e_1_2 + partial_m_1_e_1_2 + partial_m_m1_e_1_2;
      const double m_111 = partial_m_1_e_1_1 - partial_m_m1_e_1_1;
      const double chimera_kappa_0_e_2_0 = -m_000*u_1*u_1 + m_020;
      const double chimera_kappa_0_0_e_2 = -m_000*u_2*u_2 + m_002;
      const double chimera_kappa_1_e_1_0 = -m_000*u_0*u_1 + m_110;
      const double chimera_kappa_1_0_e_1 = -m_000*u_0*u_2 + m_101;
      const double chimera_kappa_0_1_e_1 = -m_000*u_1*u_2 + m_011;
      const double chimera_kappa_2_e_1_0 = -m_200*u_1 + m_210;
      const double chimera_kappa_2_0_e_1 = -m_200*u_2 + m_201;
      const double chimera_kappa_1_e_2_0 = m_000*u_0*(u_1*u_1) + m_110*u_1*-2.0 + m_120;
      const double chimera_kappa_1_0_e_2 = m_000*u_0*(u_2*u_2) + m_101*u_2*-2.0 + m_102;
      const double chimera_kappa_0_2_e_1 = -m_020*u_2 + m_021;
      const double chimera_kappa_0_e_2_1 = chimera_kappa_0_1_e_1*u_1*-2.0 + chimera_kappa_0_2_e_1;
      const double chimera_kappa_0_1_e_2 = m_000*u_1*(u_2*u_2) + m_011*u_2*-2.0 + m_012;
      const double chimera_kappa_0_e_1_2 = -chimera_kappa_0_0_e_2*u_1 + chimera_kappa_0_1_e_2;
      const double chimera_kappa_1_1_e_1 = -m_110*u_2 + m_111;
      const double chimera_kappa_1_e_1_1 = -chimera_kappa_1_0_e_1*u_1 + chimera_kappa_1_1_e_1;
      const double kappa_200 = -m_000*u_0*u_0 + m_200;
      const double kappa_210 = chimera_kappa_1_e_1_0*u_0*-2.0 + chimera_kappa_2_e_1_0;
      const double kappa_201 = chimera_kappa_1_0_e_1*u_0*-2.0 + chimera_kappa_2_0_e_1;
      const double kappa_120 = -chimera_kappa_0_e_2_0*u_0 + chimera_kappa_1_e_2_0;
      const double kappa_102 = -chimera_kappa_0_0_e_2*u_0 + chimera_kappa_1_0_e_2;
      const double xi_0 = ((1.0) / (m_000*0.01 + fabs(kappa_102 + kappa_120)));
      const double xi_1 = ((1.0) / (m_000*0.01 + fabs(kappa_102 - kappa_120)));
      const double kappa_111 = -chimera_kappa_0_1_e_1*u_0 + chimera_kappa_1_e_1_1;
      const double xi_2 = ((1.0) / (m_000*0.01 + fabs(kappa_111)));
      const double C_7 = -chimera_kappa_0_e_2_0 + kappa_200;
      const double C_8 = -chimera_kappa_0_0_e_2 + kappa_200;
      const double C_10 = kappa_102 + kappa_120;
      const double C_11 = chimera_kappa_0_e_1_2 + kappa_210;
      const double C_12 = chimera_kappa_0_e_2_1 + kappa_201;
      const double C_13 = -kappa_102 + kappa_120;
      const double C_14 = -chimera_kappa_0_e_1_2 + kappa_210;
      const double C_15 = -chimera_kappa_0_e_2_1 + kappa_201;
      const double chimera_m_post_0_e_1_0 = m_000*u_1;
      const double chimera_m_post_0_0_e_1 = m_000*u_2;
      const double m_post_100 = m_000*u_0;
      const double sub_k_to_f_0 = m_000 - 1.0;
      const double a_corr = omega*xi_4*xi_6*-2.0 + xi_4*xi_6*-4.0 + xi_4*xi_6*3.0*(omega*omega);
      const double b_corr = omega*xi_4*xi_6*-9.3333333333333321 + xi_4*xi_6*-1.3333333333333333 + xi_4*xi_6*4.6666666666666661*(omega*omega);
      const double C_post_4 = -chimera_kappa_1_e_1_0*omega + chimera_kappa_1_e_1_0;
      const double C_post_5 = -chimera_kappa_1_0_e_1*omega + chimera_kappa_1_0_e_1;
      const double C_post_6 = -chimera_kappa_0_1_e_1*omega + chimera_kappa_0_1_e_1;
      const double C_post_7 = -C_7*omega + C_7;
      const double C_post_8 = -C_8*omega + C_8;
      const double chimera_m_post_0_e_1_1 = C_post_6 + chimera_m_post_0_0_e_1*u_1;
      const double m_post_110 = C_post_4 + chimera_m_post_0_e_1_0*u_0;
      const double m_post_101 = C_post_5 + chimera_m_post_0_0_e_1*u_0;
      const double DxvDyu = chimera_kappa_1_e_1_0*omega*xi_8*-3.0;
      const double DxwDzu = chimera_kappa_1_0_e_1*omega*xi_8*-3.0;
      const double DywDzv = chimera_kappa_0_1_e_1*omega*xi_8*-3.0;
      const double c_post_200 = C_post_7*0.33333333333333331 + C_post_8*0.33333333333333331 + m_000*0.33333333333333331;
      const double c_post_020 = C_post_7*-0.66666666666666663 + C_post_8*0.33333333333333331 + m_000*0.33333333333333331;
      const double c_post_002 = C_post_7*0.33333333333333331 + C_post_8*-0.66666666666666663 + m_000*0.33333333333333331;
      const double chimera_m_post_0_e_2_0 = c_post_020 + m_000*(u_1*u_1);
      const double chimera_m_post_0_0_e_2 = c_post_002 + m_000*(u_2*u_2);
      const double m_post_200 = c_post_200 + m_000*(u_0*u_0);
      const double sub_k_to_f_4 = m_post_200 - 0.33333333333333331;
      const double sub_k_to_f_5 = chimera_m_post_0_e_2_0 - 0.33333333333333331;
      const double sub_k_to_f_6 = chimera_m_post_0_0_e_2 - 0.33333333333333331;
      const double Dx = chimera_kappa_0_0_e_2*omega*xi_8*0.5 + chimera_kappa_0_0_e_2*xi_8*-0.5 + chimera_kappa_0_e_2_0*omega*xi_8*0.5 + chimera_kappa_0_e_2_0*xi_8*-0.5 - kappa_200*omega*xi_8 + kappa_200*xi_8*-0.5 + m_000*xi_8*0.5;
      const double Dy = Dx + chimera_kappa_0_e_2_0*omega*xi_8*-1.5 + kappa_200*omega*xi_8*1.5;
      const double Dz = Dx + chimera_kappa_0_0_e_2*omega*xi_8*-1.5 + kappa_200*omega*xi_8*1.5;
      const double non_limited_omega_3 = omega*xi_7*24.0 + xi_7*-16.0*(omega*omega) + xi_7*16.0;
      const double non_limited_omega_4 = omega*xi_5*-120.0 + xi_5*112.0 + xi_5*32.0*(omega*omega);
      const double non_limited_omega_5 = omega*xi_3*-288.0 + xi_3*-72.0*(omega*omega*omega) + xi_3*-96.0 + xi_3*312.0*(omega*omega);
      const double limited_omega_3 = non_limited_omega_3 + xi_0*(-non_limited_omega_3 + 1.0)*fabs(kappa_102 + kappa_120);
      const double limited_omega_4 = non_limited_omega_4 + xi_1*(-non_limited_omega_4 + 1.0)*fabs(kappa_102 - kappa_120);
      const double limited_omega_5 = non_limited_omega_5 + xi_2*(-non_limited_omega_5 + 1.0)*fabs(kappa_111);
      const double C_post_10 = -C_10*limited_omega_3 + C_10;
      const double C_post_11 = -C_11*limited_omega_3 + C_11;
      const double C_post_12 = -C_12*limited_omega_3 + C_12;
      const double C_post_13 = -C_13*limited_omega_4 + C_13;
      const double C_post_14 = -C_14*limited_omega_4 + C_14;
      const double C_post_15 = -C_15*limited_omega_4 + C_15;
      const double c_post_210 = C_post_11*0.5 + C_post_14*0.5;
      const double c_post_201 = C_post_12*0.5 + C_post_15*0.5;
      const double c_post_120 = C_post_10*0.5 + C_post_13*0.5;
      const double c_post_102 = C_post_10*0.5 + C_post_13*-0.5;
      const double c_post_021 = C_post_12*0.5 + C_post_15*-0.5;
      const double c_post_012 = C_post_11*0.5 + C_post_14*-0.5;
      const double chimera_m_post_2_e_1_0 = c_post_200*u_1 + c_post_210;
      const double chimera_m_post_2_0_e_1 = c_post_200*u_2 + c_post_201;
      const double chimera_m_post_1_e_2_0 = C_post_4*u_1*2.0 + c_post_120;
      const double chimera_m_post_1_0_e_2 = C_post_5*u_2*2.0 + c_post_102;
      const double chimera_m_post_0_2_e_1 = c_post_020*u_2 + c_post_021;
      const double chimera_m_post_0_e_2_1 = C_post_6*u_1*2.0 + chimera_m_post_0_0_e_1*(u_1*u_1) + chimera_m_post_0_2_e_1;
      const double chimera_m_post_0_1_e_2 = C_post_6*u_2*2.0 + c_post_012;
      const double chimera_m_post_0_e_1_2 = chimera_m_post_0_0_e_2*u_1 + chimera_m_post_0_1_e_2;
      const double m_post_210 = C_post_4*u_0*2.0 + chimera_m_post_0_e_1_0*(u_0*u_0) + chimera_m_post_2_e_1_0;
      const double m_post_201 = C_post_5*u_0*2.0 + chimera_m_post_0_0_e_1*(u_0*u_0) + chimera_m_post_2_0_e_1;
      const double m_post_120 = chimera_m_post_0_e_2_0*u_0 + chimera_m_post_1_e_2_0;
      const double m_post_102 = chimera_m_post_0_0_e_2*u_0 + chimera_m_post_1_0_e_2;
      const double C_post_16 = -kappa_111*limited_omega_5 + kappa_111;
      const double chimera_m_post_1_1_e_1 = C_post_16 + C_post_4*u_2;
      const double chimera_m_post_1_e_1_1 = C_post_5*u_1 + chimera_m_post_1_1_e_1;
      const double m_post_111 = chimera_m_post_0_e_1_1*u_0 + chimera_m_post_1_e_1_1;
      const double corr_fourth_0 = Dx*a_corr*m_000*xi_9*0.66666666666666663 + Dx*a_corr*m_000*-0.33333333333333331 + Dy*a_corr*m_000*xi_9*-1.3333333333333333 + Dy*a_corr*m_000*0.66666666666666663 + Dz*a_corr*m_000*xi_9*0.66666666666666663 + Dz*a_corr*m_000*-0.33333333333333331;
      const double corr_fourth_1 = Dx*a_corr*m_000*xi_9*0.66666666666666663 + Dx*a_corr*m_000*-0.33333333333333331 + Dy*a_corr*m_000*xi_9*0.66666666666666663 + Dy*a_corr*m_000*-0.33333333333333331 + Dz*a_corr*m_000*xi_9*-1.3333333333333333 + Dz*a_corr*m_000*0.66666666666666663;
      const double corr_fourth_2 = Dx*a_corr*m_000*xi_9*-1.3333333333333333 + Dx*a_corr*m_000*0.66666666666666663 + Dy*a_corr*m_000*xi_9*-1.3333333333333333 + Dy*a_corr*m_000*0.66666666666666663 + Dz*a_corr*m_000*xi_9*-1.3333333333333333 + Dz*a_corr*m_000*0.66666666666666663;
      const double c_post_220 = corr_fourth_0*0.33333333333333331 + corr_fourth_1*0.33333333333333331 + corr_fourth_2*0.33333333333333331;
      const double c_post_202 = corr_fourth_0*-0.33333333333333331 + corr_fourth_2*0.33333333333333331;
      const double c_post_022 = corr_fourth_1*-0.33333333333333331 + corr_fourth_2*0.33333333333333331;
      const double kappa_post_220 = c_post_020*c_post_200*xi_8 + c_post_220 + xi_8*2.0*(C_post_4*C_post_4);
      const double kappa_post_202 = c_post_002*c_post_200*xi_8 + c_post_202 + xi_8*2.0*(C_post_5*C_post_5);
      const double kappa_post_022 = c_post_002*c_post_020*xi_8 + c_post_022 + xi_8*2.0*(C_post_6*C_post_6);
      const double chimera_m_post_2_e_2_0 = c_post_200*(u_1*u_1) + c_post_210*u_1*2.0 + kappa_post_220;
      const double chimera_m_post_2_0_e_2 = c_post_200*(u_2*u_2) + c_post_201*u_2*2.0 + kappa_post_202;
      const double chimera_m_post_0_2_e_2 = c_post_020*(u_2*u_2) + c_post_021*u_2*2.0 + kappa_post_022;
      const double chimera_m_post_0_e_2_2 = chimera_m_post_0_0_e_2*(u_1*u_1) + chimera_m_post_0_1_e_2*u_1*2.0 + chimera_m_post_0_2_e_2;
      const double m_post_220 = chimera_m_post_0_e_2_0*(u_0*u_0) + chimera_m_post_1_e_2_0*u_0*2.0 + chimera_m_post_2_e_2_0;
      const double m_post_202 = chimera_m_post_0_0_e_2*(u_0*u_0) + chimera_m_post_1_0_e_2*u_0*2.0 + chimera_m_post_2_0_e_2;
      const double sub_k_to_f_17 = m_post_220 - 0.1111111111111111;
      const double sub_k_to_f_18 = m_post_202 - 0.1111111111111111;
      const double sub_k_to_f_19 = chimera_m_post_0_e_2_2 - 0.1111111111111111;
      const double corr_fourth_3 = DywDzv*b_corr*m_000*xi_9*-0.33333333333333331 + DywDzv*b_corr*m_000*0.16666666666666666;
      const double kappa_post_211 = C_post_4*C_post_5*xi_8*2.0 + C_post_6*c_post_200*xi_8 + corr_fourth_3;
      const double chimera_m_post_2_1_e_1 = c_post_210*u_2 + kappa_post_211;
      const double chimera_m_post_2_e_1_1 = chimera_m_post_2_0_e_1*u_1 + chimera_m_post_2_1_e_1;
      const double m_post_211 = chimera_m_post_0_e_1_1*(u_0*u_0) + chimera_m_post_1_e_1_1*u_0*2.0 + chimera_m_post_2_e_1_1;
      const double corr_fourth_4 = DxwDzu*b_corr*m_000*xi_9*-0.33333333333333331 + DxwDzu*b_corr*m_000*0.16666666666666666;
      const double kappa_post_121 = C_post_4*C_post_6*xi_8*2.0 + C_post_5*c_post_020*xi_8 + corr_fourth_4;
      const double chimera_m_post_1_2_e_1 = c_post_120*u_2 + kappa_post_121;
      const double chimera_m_post_1_e_2_1 = C_post_5*(u_1*u_1) + chimera_m_post_1_1_e_1*u_1*2.0 + chimera_m_post_1_2_e_1;
      const double m_post_121 = chimera_m_post_0_e_2_1*u_0 + chimera_m_post_1_e_2_1;
      const double corr_fourth_5 = DxvDyu*b_corr*m_000*xi_9*-0.33333333333333331 + DxvDyu*b_corr*m_000*0.16666666666666666;
      const double kappa_post_112 = C_post_4*c_post_002*xi_8 + C_post_5*C_post_6*xi_8*2.0 + corr_fourth_5;
      const double chimera_m_post_1_1_e_2 = C_post_16*u_2*2.0 + C_post_4*(u_2*u_2) + kappa_post_112;
      const double chimera_m_post_1_e_1_2 = chimera_m_post_1_0_e_2*u_1 + chimera_m_post_1_1_e_2;
      const double m_post_112 = chimera_m_post_0_e_1_2*u_0 + chimera_m_post_1_e_1_2;
      const double kappa_post_221 = C_post_16*C_post_4*xi_8*4.0 + C_post_5*c_post_120*xi_8*2.0 + C_post_6*c_post_210*xi_8*2.0 + c_post_020*c_post_201*xi_8 + c_post_021*c_post_200*xi_8;
      const double kappa_post_212 = C_post_16*C_post_5*xi_8*4.0 + C_post_4*c_post_102*xi_8*2.0 + C_post_6*c_post_201*xi_8*2.0 + c_post_002*c_post_210*xi_8 + c_post_012*c_post_200*xi_8;
      const double kappa_post_122 = C_post_16*C_post_6*xi_8*4.0 + C_post_4*c_post_012*xi_8*2.0 + C_post_5*c_post_021*xi_8*2.0 + c_post_002*c_post_120*xi_8 + c_post_020*c_post_102*xi_8;
      const double chimera_m_post_2_2_e_1 = kappa_post_220*u_2 + kappa_post_221;
      const double chimera_m_post_2_e_2_1 = chimera_m_post_2_0_e_1*(u_1*u_1) + chimera_m_post_2_1_e_1*u_1*2.0 + chimera_m_post_2_2_e_1;
      const double chimera_m_post_2_1_e_2 = c_post_210*(u_2*u_2) + kappa_post_211*u_2*2.0 + kappa_post_212;
      const double chimera_m_post_2_e_1_2 = chimera_m_post_2_0_e_2*u_1 + chimera_m_post_2_1_e_2;
      const double chimera_m_post_1_2_e_2 = c_post_120*(u_2*u_2) + kappa_post_121*u_2*2.0 + kappa_post_122;
      const double chimera_m_post_1_e_2_2 = chimera_m_post_1_0_e_2*(u_1*u_1) + chimera_m_post_1_1_e_2*u_1*2.0 + chimera_m_post_1_2_e_2;
      const double m_post_221 = chimera_m_post_0_e_2_1*(u_0*u_0) + chimera_m_post_1_e_2_1*u_0*2.0 + chimera_m_post_2_e_2_1;
      const double m_post_212 = chimera_m_post_0_e_1_2*(u_0*u_0) + chimera_m_post_1_e_1_2*u_0*2.0 + chimera_m_post_2_e_1_2;
      const double m_post_122 = chimera_m_post_0_e_2_2*u_0 + chimera_m_post_1_e_2_2;
      const double sub_k_to_f_29 = chimera_m_post_0_e_1_0*0.5 + chimera_m_post_0_e_1_2*-0.5 + m_post_210*-0.5 + m_post_212*0.5;
      const double sub_k_to_f_31 = m_post_100*-0.5 + m_post_102*0.5 + m_post_120*0.5 + m_post_122*-0.5;
      const double sub_k_to_f_33 = chimera_m_post_0_0_e_1*0.5 + chimera_m_post_0_e_2_1*-0.5 + m_post_201*-0.5 + m_post_221*0.5;
      const double sub_k_to_f_35 = m_post_120*-0.25 + m_post_122*0.25 + m_post_210*0.25 + m_post_212*-0.25;
      const double sub_k_to_f_37 = m_post_120*0.25 + m_post_122*-0.25 + m_post_210*0.25 + m_post_212*-0.25;
      const double sub_k_to_f_39 = chimera_m_post_0_e_1_2*0.25 + chimera_m_post_0_e_2_1*0.25 + m_post_212*-0.25 + m_post_221*-0.25;
      const double sub_k_to_f_41 = chimera_m_post_0_e_1_2*-0.25 + chimera_m_post_0_e_2_1*0.25 + m_post_212*0.25 + m_post_221*-0.25;
      const double sub_k_to_f_43 = m_post_102*-0.25 + m_post_122*0.25 + m_post_201*0.25 + m_post_221*-0.25;
      const double sub_k_to_f_45 = m_post_102*0.25 + m_post_122*-0.25 + m_post_201*0.25 + m_post_221*-0.25;
      const double sub_k_to_f_47 = m_post_111*0.125 + m_post_122*0.125 + m_post_212*0.125 + m_post_221*0.125;
      const double sub_k_to_f_49 = m_post_111*-0.125 + m_post_122*-0.125 + m_post_212*0.125 + m_post_221*0.125;
      const double sub_k_to_f_51 = m_post_111*-0.125 + m_post_122*0.125 + m_post_212*-0.125 + m_post_221*0.125;
      const double sub_k_to_f_53 = m_post_111*0.125 + m_post_122*-0.125 + m_post_212*-0.125 + m_post_221*0.125;
      const double kappa_post_222 = C_post_4*C_post_5*C_post_6*xi_10*8.0 + C_post_4*corr_fourth_5*xi_8*4.0 + C_post_5*corr_fourth_4*xi_8*4.0 + C_post_6*corr_fourth_3*xi_8*4.0 + c_post_002*c_post_020*c_post_200*xi_10 + c_post_002*c_post_220*xi_8 + c_post_002*xi_10*2.0*(C_post_4*C_post_4) + c_post_012*c_post_210*xi_8*2.0 + c_post_020*c_post_202*xi_8 + c_post_020*xi_10*2.0*(C_post_5*C_post_5) + c_post_021*c_post_201*xi_8*2.0 + c_post_022*c_post_200*xi_8 + c_post_102*c_post_120*xi_8*2.0 + c_post_200*xi_10*2.0*(C_post_6*C_post_6) + xi_8*4.0*(C_post_16*C_post_16);
      const double chimera_m_post_2_2_e_2 = kappa_post_220*(u_2*u_2) + kappa_post_221*u_2*2.0 + kappa_post_222;
      const double chimera_m_post_2_e_2_2 = chimera_m_post_2_0_e_2*(u_1*u_1) + chimera_m_post_2_1_e_2*u_1*2.0 + chimera_m_post_2_2_e_2;
      const double m_post_222 = chimera_m_post_0_e_2_2*(u_0*u_0) + chimera_m_post_1_e_2_2*u_0*2.0 + chimera_m_post_2_e_2_2;
      const double sub_k_to_f_26 = m_post_222 - 0.037037037037037035;
      const double sub_k_to_f_28 = sub_k_to_f_17*-0.5 + sub_k_to_f_19*-0.5 + sub_k_to_f_26*0.5 + sub_k_to_f_5*0.5;
      const double sub_k_to_f_30 = sub_k_to_f_17*-0.5 + sub_k_to_f_18*-0.5 + sub_k_to_f_26*0.5 + sub_k_to_f_4*0.5;
      const double sub_k_to_f_32 = sub_k_to_f_18*-0.5 + sub_k_to_f_19*-0.5 + sub_k_to_f_26*0.5 + sub_k_to_f_6*0.5;
      const double sub_k_to_f_34 = m_post_110*-0.25 + m_post_112*0.25 + sub_k_to_f_17*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_36 = m_post_110*0.25 + m_post_112*-0.25 + sub_k_to_f_17*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_38 = chimera_m_post_0_e_1_1*0.25 + m_post_211*-0.25 + sub_k_to_f_19*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_40 = chimera_m_post_0_e_1_1*-0.25 + m_post_211*0.25 + sub_k_to_f_19*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_42 = m_post_101*-0.25 + m_post_121*0.25 + sub_k_to_f_18*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_44 = m_post_101*0.25 + m_post_121*-0.25 + sub_k_to_f_18*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_46 = m_post_112*0.125 + m_post_121*0.125 + m_post_211*0.125 + sub_k_to_f_26*0.125;
      const double sub_k_to_f_48 = m_post_112*-0.125 + m_post_121*-0.125 + m_post_211*0.125 + sub_k_to_f_26*0.125;
      const double sub_k_to_f_50 = m_post_112*-0.125 + m_post_121*0.125 + m_post_211*-0.125 + sub_k_to_f_26*0.125;
      const double sub_k_to_f_52 = m_post_112*0.125 + m_post_121*-0.125 + m_post_211*-0.125 + sub_k_to_f_26*0.125;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = sub_k_to_f_0 + sub_k_to_f_17 + sub_k_to_f_18 + sub_k_to_f_19 - sub_k_to_f_26 - sub_k_to_f_4 - sub_k_to_f_5 - sub_k_to_f_6;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = sub_k_to_f_28 + sub_k_to_f_29;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = sub_k_to_f_28 - sub_k_to_f_29;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = sub_k_to_f_30 + sub_k_to_f_31;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = sub_k_to_f_30 - sub_k_to_f_31;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] = sub_k_to_f_32 + sub_k_to_f_33;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] = sub_k_to_f_32 - sub_k_to_f_33;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = sub_k_to_f_34 + sub_k_to_f_35;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = sub_k_to_f_36 + sub_k_to_f_37;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = sub_k_to_f_36 - sub_k_to_f_37;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = sub_k_to_f_34 - sub_k_to_f_35;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] = sub_k_to_f_38 + sub_k_to_f_39;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] = sub_k_to_f_40 + sub_k_to_f_41;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] = sub_k_to_f_42 + sub_k_to_f_43;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] = sub_k_to_f_44 + sub_k_to_f_45;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] = sub_k_to_f_40 - sub_k_to_f_41;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] = sub_k_to_f_38 - sub_k_to_f_39;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] = sub_k_to_f_44 - sub_k_to_f_45;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] = sub_k_to_f_42 - sub_k_to_f_43;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] = sub_k_to_f_46 + sub_k_to_f_47;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] = sub_k_to_f_48 + sub_k_to_f_49;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] = sub_k_to_f_50 + sub_k_to_f_51;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] = sub_k_to_f_52 + sub_k_to_f_53;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] = sub_k_to_f_52 - sub_k_to_f_53;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] = sub_k_to_f_50 - sub_k_to_f_51;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] = sub_k_to_f_48 - sub_k_to_f_49;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] = sub_k_to_f_46 - sub_k_to_f_47;
   } 
}
}

namespace internal_TestSweepCollection_kernel_collideEven {
static FUNC_PREFIX void TestSweepCollection_kernel_collideEven(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double xi_53 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3];
      const double xi_54 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double xi_55 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      const double xi_56 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3];
      const double xi_57 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      const double xi_58 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3];
      const double xi_59 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3];
      const double xi_60 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3];
      const double xi_61 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      const double xi_62 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      const double xi_63 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3];
      const double xi_64 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3];
      const double xi_65 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3];
      const double xi_66 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3];
      const double xi_67 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3];
      const double xi_68 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3];
      const double xi_69 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3];
      const double xi_70 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      const double xi_71 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double xi_72 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3];
      const double xi_73 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3];
      const double xi_74 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3];
      const double xi_75 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      const double xi_76 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      const double xi_77 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3];
      const double xi_78 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3];
      const double xi_79 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3];
      const double xi_3 = ((1.0) / (omega*(omega*15.0 - 28.0)*(omega*3.0 - 10.0) + omega*(omega*(omega*9.0 - 46.0)*5.0 + 216.0)*-2.0 + (omega - 6.0)*16.0*(omega*omega) - 48.0));
      const double xi_4 = ((1.0) / (omega*-5.0 + 2.0));
      const double xi_5 = ((1.0) / (omega*-50.0 + 56.0 + 9.0*(omega*omega)));
      const double xi_6 = ((1.0) / (omega - 1.0));
      const double xi_7 = ((1.0) / (omega*(omega*-16.0 + 40.0) + omega*(omega*9.0 - 26.0) + 8.0));
      const double xi_9 = ((1.0) / (omega));
      const double partial_m_m1_m1_e_0 = xi_55 + xi_56 + xi_63;
      const double partial_m_m1_0_e_0 = xi_57 + xi_66 + xi_73;
      const double partial_m_m1_1_e_0 = xi_58 + xi_69 + xi_76;
      const double partial_m_m1_e_0_0 = partial_m_m1_0_e_0 + partial_m_m1_1_e_0 + partial_m_m1_m1_e_0;
      const double partial_m_0_m1_e_0 = xi_64 + xi_75 + xi_77;
      const double partial_m_0_0_e_0 = xi_71 + xi_74 + xi_78;
      const double partial_m_0_1_e_0 = xi_54 + xi_67 + xi_79;
      const double partial_m_0_e_0_0 = partial_m_0_0_e_0 + partial_m_0_1_e_0 + partial_m_0_m1_e_0;
      const double partial_m_1_m1_e_0 = xi_60 + xi_70 + xi_72;
      const double partial_m_1_0_e_0 = xi_53 + xi_59 + xi_62;
      const double partial_m_1_1_e_0 = xi_61 + xi_65 + xi_68;
      const double partial_m_1_e_0_0 = partial_m_1_0_e_0 + partial_m_1_1_e_0 + partial_m_1_m1_e_0;
      const double partial_m_m1_e_1_0 = partial_m_m1_1_e_0 - partial_m_m1_m1_e_0;
      const double partial_m_0_e_1_0 = partial_m_0_1_e_0 - partial_m_0_m1_e_0;
      const double partial_m_1_e_1_0 = partial_m_1_1_e_0 - partial_m_1_m1_e_0;
      const double partial_m_m1_m1_e_1 = xi_56 - xi_63;
      const double partial_m_m1_0_e_1 = -xi_66 + xi_73;
      const double partial_m_m1_1_e_1 = -xi_58 + xi_69;
      const double partial_m_m1_e_0_1 = partial_m_m1_0_e_1 + partial_m_m1_1_e_1 + partial_m_m1_m1_e_1;
      const double partial_m_0_m1_e_1 = xi_64 - xi_77;
      const double partial_m_0_0_e_1 = xi_74 - xi_78;
      const double partial_m_0_1_e_1 = xi_67 - xi_79;
      const double partial_m_0_e_0_1 = partial_m_0_0_e_1 + partial_m_0_1_e_1 + partial_m_0_m1_e_1;
      const double partial_m_1_m1_e_1 = -xi_60 + xi_72;
      const double partial_m_1_0_e_1 = -xi_53 + xi_59;
      const double partial_m_1_1_e_1 = xi_65 - xi_68;
      const double partial_m_1_e_0_1 = partial_m_1_0_e_1 + partial_m_1_1_e_1 + partial_m_1_m1_e_1;
      const double partial_m_m1_e_2_0 = partial_m_m1_1_e_0 + partial_m_m1_m1_e_0;
      const double partial_m_0_e_2_0 = partial_m_0_1_e_0 + partial_m_0_m1_e_0;
      const double partial_m_1_e_2_0 = partial_m_1_1_e_0 + partial_m_1_m1_e_0;
      const double partial_m_m1_m1_e_2 = xi_56 + xi_63;
      const double partial_m_m1_0_e_2 = xi_66 + xi_73;
      const double partial_m_m1_1_e_2 = xi_58 + xi_69;
      const double partial_m_m1_e_0_2 = partial_m_m1_0_e_2 + partial_m_m1_1_e_2 + partial_m_m1_m1_e_2;
      const double partial_m_0_m1_e_2 = xi_64 + xi_77;
      const double partial_m_0_0_e_2 = xi_74 + xi_78;
      const double partial_m_0_1_e_2 = xi_67 + xi_79;
      const double partial_m_0_e_0_2 = partial_m_0_0_e_2 + partial_m_0_1_e_2 + partial_m_0_m1_e_2;
      const double partial_m_1_m1_e_2 = xi_60 + xi_72;
      const double partial_m_1_0_e_2 = xi_53 + xi_59;
      const double partial_m_1_1_e_2 = xi_65 + xi_68;
      const double partial_m_1_e_0_2 = partial_m_1_0_e_2 + partial_m_1_1_e_2 + partial_m_1_m1_e_2;
      const double partial_m_m1_e_1_1 = partial_m_m1_1_e_1 - partial_m_m1_m1_e_1;
      const double partial_m_0_e_1_1 = partial_m_0_1_e_1 - partial_m_0_m1_e_1;
      const double partial_m_1_e_1_1 = partial_m_1_1_e_1 - partial_m_1_m1_e_1;
      const double partial_m_m1_e_2_1 = partial_m_m1_1_e_1 + partial_m_m1_m1_e_1;
      const double partial_m_0_e_2_1 = partial_m_0_1_e_1 + partial_m_0_m1_e_1;
      const double partial_m_1_e_2_1 = partial_m_1_1_e_1 + partial_m_1_m1_e_1;
      const double partial_m_m1_e_1_2 = partial_m_m1_1_e_2 - partial_m_m1_m1_e_2;
      const double partial_m_0_e_1_2 = partial_m_0_1_e_2 - partial_m_0_m1_e_2;
      const double partial_m_1_e_1_2 = partial_m_1_1_e_2 - partial_m_1_m1_e_2;
      const double m_000 = partial_m_0_e_0_0 + partial_m_1_e_0_0 + partial_m_m1_e_0_0 + 1.0;
      const double xi_8 = ((1.0) / (m_000));
      const double xi_10 = ((1.0) / (m_000*m_000));
      const double m_100 = partial_m_1_e_0_0 - partial_m_m1_e_0_0;
      const double u_0 = m_100*xi_8;
      const double m_010 = partial_m_0_e_1_0 + partial_m_1_e_1_0 + partial_m_m1_e_1_0;
      const double u_1 = m_010*xi_8;
      const double m_001 = partial_m_0_e_0_1 + partial_m_1_e_0_1 + partial_m_m1_e_0_1;
      const double u_2 = m_001*xi_8;
      const double m_200 = partial_m_1_e_0_0 + partial_m_m1_e_0_0 + 0.33333333333333331;
      const double m_020 = partial_m_0_e_2_0 + partial_m_1_e_2_0 + partial_m_m1_e_2_0 + 0.33333333333333331;
      const double m_002 = partial_m_0_e_0_2 + partial_m_1_e_0_2 + partial_m_m1_e_0_2 + 0.33333333333333331;
      const double m_110 = partial_m_1_e_1_0 - partial_m_m1_e_1_0;
      const double m_101 = partial_m_1_e_0_1 - partial_m_m1_e_0_1;
      const double m_011 = partial_m_0_e_1_1 + partial_m_1_e_1_1 + partial_m_m1_e_1_1;
      const double m_210 = partial_m_1_e_1_0 + partial_m_m1_e_1_0;
      const double m_201 = partial_m_1_e_0_1 + partial_m_m1_e_0_1;
      const double m_120 = partial_m_1_e_2_0 - partial_m_m1_e_2_0;
      const double m_102 = partial_m_1_e_0_2 - partial_m_m1_e_0_2;
      const double m_021 = partial_m_0_e_2_1 + partial_m_1_e_2_1 + partial_m_m1_e_2_1;
      const double m_012 = partial_m_0_e_1_2 + partial_m_1_e_1_2 + partial_m_m1_e_1_2;
      const double m_111 = partial_m_1_e_1_1 - partial_m_m1_e_1_1;
      const double chimera_kappa_0_e_2_0 = -m_000*u_1*u_1 + m_020;
      const double chimera_kappa_0_0_e_2 = -m_000*u_2*u_2 + m_002;
      const double chimera_kappa_1_e_1_0 = -m_000*u_0*u_1 + m_110;
      const double chimera_kappa_1_0_e_1 = -m_000*u_0*u_2 + m_101;
      const double chimera_kappa_0_1_e_1 = -m_000*u_1*u_2 + m_011;
      const double chimera_kappa_2_e_1_0 = -m_200*u_1 + m_210;
      const double chimera_kappa_2_0_e_1 = -m_200*u_2 + m_201;
      const double chimera_kappa_1_e_2_0 = m_000*u_0*(u_1*u_1) + m_110*u_1*-2.0 + m_120;
      const double chimera_kappa_1_0_e_2 = m_000*u_0*(u_2*u_2) + m_101*u_2*-2.0 + m_102;
      const double chimera_kappa_0_2_e_1 = -m_020*u_2 + m_021;
      const double chimera_kappa_0_e_2_1 = chimera_kappa_0_1_e_1*u_1*-2.0 + chimera_kappa_0_2_e_1;
      const double chimera_kappa_0_1_e_2 = m_000*u_1*(u_2*u_2) + m_011*u_2*-2.0 + m_012;
      const double chimera_kappa_0_e_1_2 = -chimera_kappa_0_0_e_2*u_1 + chimera_kappa_0_1_e_2;
      const double chimera_kappa_1_1_e_1 = -m_110*u_2 + m_111;
      const double chimera_kappa_1_e_1_1 = -chimera_kappa_1_0_e_1*u_1 + chimera_kappa_1_1_e_1;
      const double kappa_200 = -m_000*u_0*u_0 + m_200;
      const double kappa_210 = chimera_kappa_1_e_1_0*u_0*-2.0 + chimera_kappa_2_e_1_0;
      const double kappa_201 = chimera_kappa_1_0_e_1*u_0*-2.0 + chimera_kappa_2_0_e_1;
      const double kappa_120 = -chimera_kappa_0_e_2_0*u_0 + chimera_kappa_1_e_2_0;
      const double kappa_102 = -chimera_kappa_0_0_e_2*u_0 + chimera_kappa_1_0_e_2;
      const double xi_0 = ((1.0) / (m_000*0.01 + fabs(kappa_102 + kappa_120)));
      const double xi_1 = ((1.0) / (m_000*0.01 + fabs(kappa_102 - kappa_120)));
      const double kappa_111 = -chimera_kappa_0_1_e_1*u_0 + chimera_kappa_1_e_1_1;
      const double xi_2 = ((1.0) / (m_000*0.01 + fabs(kappa_111)));
      const double C_7 = -chimera_kappa_0_e_2_0 + kappa_200;
      const double C_8 = -chimera_kappa_0_0_e_2 + kappa_200;
      const double C_10 = kappa_102 + kappa_120;
      const double C_11 = chimera_kappa_0_e_1_2 + kappa_210;
      const double C_12 = chimera_kappa_0_e_2_1 + kappa_201;
      const double C_13 = -kappa_102 + kappa_120;
      const double C_14 = -chimera_kappa_0_e_1_2 + kappa_210;
      const double C_15 = -chimera_kappa_0_e_2_1 + kappa_201;
      const double chimera_m_post_0_e_1_0 = m_000*u_1;
      const double chimera_m_post_0_0_e_1 = m_000*u_2;
      const double m_post_100 = m_000*u_0;
      const double sub_k_to_f_0 = m_000 - 1.0;
      const double a_corr = omega*xi_4*xi_6*-2.0 + xi_4*xi_6*-4.0 + xi_4*xi_6*3.0*(omega*omega);
      const double b_corr = omega*xi_4*xi_6*-9.3333333333333321 + xi_4*xi_6*-1.3333333333333333 + xi_4*xi_6*4.6666666666666661*(omega*omega);
      const double C_post_4 = -chimera_kappa_1_e_1_0*omega + chimera_kappa_1_e_1_0;
      const double C_post_5 = -chimera_kappa_1_0_e_1*omega + chimera_kappa_1_0_e_1;
      const double C_post_6 = -chimera_kappa_0_1_e_1*omega + chimera_kappa_0_1_e_1;
      const double C_post_7 = -C_7*omega + C_7;
      const double C_post_8 = -C_8*omega + C_8;
      const double chimera_m_post_0_e_1_1 = C_post_6 + chimera_m_post_0_0_e_1*u_1;
      const double m_post_110 = C_post_4 + chimera_m_post_0_e_1_0*u_0;
      const double m_post_101 = C_post_5 + chimera_m_post_0_0_e_1*u_0;
      const double DxvDyu = chimera_kappa_1_e_1_0*omega*xi_8*-3.0;
      const double DxwDzu = chimera_kappa_1_0_e_1*omega*xi_8*-3.0;
      const double DywDzv = chimera_kappa_0_1_e_1*omega*xi_8*-3.0;
      const double c_post_200 = C_post_7*0.33333333333333331 + C_post_8*0.33333333333333331 + m_000*0.33333333333333331;
      const double c_post_020 = C_post_7*-0.66666666666666663 + C_post_8*0.33333333333333331 + m_000*0.33333333333333331;
      const double c_post_002 = C_post_7*0.33333333333333331 + C_post_8*-0.66666666666666663 + m_000*0.33333333333333331;
      const double chimera_m_post_0_e_2_0 = c_post_020 + m_000*(u_1*u_1);
      const double chimera_m_post_0_0_e_2 = c_post_002 + m_000*(u_2*u_2);
      const double m_post_200 = c_post_200 + m_000*(u_0*u_0);
      const double sub_k_to_f_4 = m_post_200 - 0.33333333333333331;
      const double sub_k_to_f_5 = chimera_m_post_0_e_2_0 - 0.33333333333333331;
      const double sub_k_to_f_6 = chimera_m_post_0_0_e_2 - 0.33333333333333331;
      const double Dx = chimera_kappa_0_0_e_2*omega*xi_8*0.5 + chimera_kappa_0_0_e_2*xi_8*-0.5 + chimera_kappa_0_e_2_0*omega*xi_8*0.5 + chimera_kappa_0_e_2_0*xi_8*-0.5 - kappa_200*omega*xi_8 + kappa_200*xi_8*-0.5 + m_000*xi_8*0.5;
      const double Dy = Dx + chimera_kappa_0_e_2_0*omega*xi_8*-1.5 + kappa_200*omega*xi_8*1.5;
      const double Dz = Dx + chimera_kappa_0_0_e_2*omega*xi_8*-1.5 + kappa_200*omega*xi_8*1.5;
      const double non_limited_omega_3 = omega*xi_7*24.0 + xi_7*-16.0*(omega*omega) + xi_7*16.0;
      const double non_limited_omega_4 = omega*xi_5*-120.0 + xi_5*112.0 + xi_5*32.0*(omega*omega);
      const double non_limited_omega_5 = omega*xi_3*-288.0 + xi_3*-72.0*(omega*omega*omega) + xi_3*-96.0 + xi_3*312.0*(omega*omega);
      const double limited_omega_3 = non_limited_omega_3 + xi_0*(-non_limited_omega_3 + 1.0)*fabs(kappa_102 + kappa_120);
      const double limited_omega_4 = non_limited_omega_4 + xi_1*(-non_limited_omega_4 + 1.0)*fabs(kappa_102 - kappa_120);
      const double limited_omega_5 = non_limited_omega_5 + xi_2*(-non_limited_omega_5 + 1.0)*fabs(kappa_111);
      const double C_post_10 = -C_10*limited_omega_3 + C_10;
      const double C_post_11 = -C_11*limited_omega_3 + C_11;
      const double C_post_12 = -C_12*limited_omega_3 + C_12;
      const double C_post_13 = -C_13*limited_omega_4 + C_13;
      const double C_post_14 = -C_14*limited_omega_4 + C_14;
      const double C_post_15 = -C_15*limited_omega_4 + C_15;
      const double c_post_210 = C_post_11*0.5 + C_post_14*0.5;
      const double c_post_201 = C_post_12*0.5 + C_post_15*0.5;
      const double c_post_120 = C_post_10*0.5 + C_post_13*0.5;
      const double c_post_102 = C_post_10*0.5 + C_post_13*-0.5;
      const double c_post_021 = C_post_12*0.5 + C_post_15*-0.5;
      const double c_post_012 = C_post_11*0.5 + C_post_14*-0.5;
      const double chimera_m_post_2_e_1_0 = c_post_200*u_1 + c_post_210;
      const double chimera_m_post_2_0_e_1 = c_post_200*u_2 + c_post_201;
      const double chimera_m_post_1_e_2_0 = C_post_4*u_1*2.0 + c_post_120;
      const double chimera_m_post_1_0_e_2 = C_post_5*u_2*2.0 + c_post_102;
      const double chimera_m_post_0_2_e_1 = c_post_020*u_2 + c_post_021;
      const double chimera_m_post_0_e_2_1 = C_post_6*u_1*2.0 + chimera_m_post_0_0_e_1*(u_1*u_1) + chimera_m_post_0_2_e_1;
      const double chimera_m_post_0_1_e_2 = C_post_6*u_2*2.0 + c_post_012;
      const double chimera_m_post_0_e_1_2 = chimera_m_post_0_0_e_2*u_1 + chimera_m_post_0_1_e_2;
      const double m_post_210 = C_post_4*u_0*2.0 + chimera_m_post_0_e_1_0*(u_0*u_0) + chimera_m_post_2_e_1_0;
      const double m_post_201 = C_post_5*u_0*2.0 + chimera_m_post_0_0_e_1*(u_0*u_0) + chimera_m_post_2_0_e_1;
      const double m_post_120 = chimera_m_post_0_e_2_0*u_0 + chimera_m_post_1_e_2_0;
      const double m_post_102 = chimera_m_post_0_0_e_2*u_0 + chimera_m_post_1_0_e_2;
      const double C_post_16 = -kappa_111*limited_omega_5 + kappa_111;
      const double chimera_m_post_1_1_e_1 = C_post_16 + C_post_4*u_2;
      const double chimera_m_post_1_e_1_1 = C_post_5*u_1 + chimera_m_post_1_1_e_1;
      const double m_post_111 = chimera_m_post_0_e_1_1*u_0 + chimera_m_post_1_e_1_1;
      const double corr_fourth_0 = Dx*a_corr*m_000*xi_9*0.66666666666666663 + Dx*a_corr*m_000*-0.33333333333333331 + Dy*a_corr*m_000*xi_9*-1.3333333333333333 + Dy*a_corr*m_000*0.66666666666666663 + Dz*a_corr*m_000*xi_9*0.66666666666666663 + Dz*a_corr*m_000*-0.33333333333333331;
      const double corr_fourth_1 = Dx*a_corr*m_000*xi_9*0.66666666666666663 + Dx*a_corr*m_000*-0.33333333333333331 + Dy*a_corr*m_000*xi_9*0.66666666666666663 + Dy*a_corr*m_000*-0.33333333333333331 + Dz*a_corr*m_000*xi_9*-1.3333333333333333 + Dz*a_corr*m_000*0.66666666666666663;
      const double corr_fourth_2 = Dx*a_corr*m_000*xi_9*-1.3333333333333333 + Dx*a_corr*m_000*0.66666666666666663 + Dy*a_corr*m_000*xi_9*-1.3333333333333333 + Dy*a_corr*m_000*0.66666666666666663 + Dz*a_corr*m_000*xi_9*-1.3333333333333333 + Dz*a_corr*m_000*0.66666666666666663;
      const double c_post_220 = corr_fourth_0*0.33333333333333331 + corr_fourth_1*0.33333333333333331 + corr_fourth_2*0.33333333333333331;
      const double c_post_202 = corr_fourth_0*-0.33333333333333331 + corr_fourth_2*0.33333333333333331;
      const double c_post_022 = corr_fourth_1*-0.33333333333333331 + corr_fourth_2*0.33333333333333331;
      const double kappa_post_220 = c_post_020*c_post_200*xi_8 + c_post_220 + xi_8*2.0*(C_post_4*C_post_4);
      const double kappa_post_202 = c_post_002*c_post_200*xi_8 + c_post_202 + xi_8*2.0*(C_post_5*C_post_5);
      const double kappa_post_022 = c_post_002*c_post_020*xi_8 + c_post_022 + xi_8*2.0*(C_post_6*C_post_6);
      const double chimera_m_post_2_e_2_0 = c_post_200*(u_1*u_1) + c_post_210*u_1*2.0 + kappa_post_220;
      const double chimera_m_post_2_0_e_2 = c_post_200*(u_2*u_2) + c_post_201*u_2*2.0 + kappa_post_202;
      const double chimera_m_post_0_2_e_2 = c_post_020*(u_2*u_2) + c_post_021*u_2*2.0 + kappa_post_022;
      const double chimera_m_post_0_e_2_2 = chimera_m_post_0_0_e_2*(u_1*u_1) + chimera_m_post_0_1_e_2*u_1*2.0 + chimera_m_post_0_2_e_2;
      const double m_post_220 = chimera_m_post_0_e_2_0*(u_0*u_0) + chimera_m_post_1_e_2_0*u_0*2.0 + chimera_m_post_2_e_2_0;
      const double m_post_202 = chimera_m_post_0_0_e_2*(u_0*u_0) + chimera_m_post_1_0_e_2*u_0*2.0 + chimera_m_post_2_0_e_2;
      const double sub_k_to_f_17 = m_post_220 - 0.1111111111111111;
      const double sub_k_to_f_18 = m_post_202 - 0.1111111111111111;
      const double sub_k_to_f_19 = chimera_m_post_0_e_2_2 - 0.1111111111111111;
      const double corr_fourth_3 = DywDzv*b_corr*m_000*xi_9*-0.33333333333333331 + DywDzv*b_corr*m_000*0.16666666666666666;
      const double kappa_post_211 = C_post_4*C_post_5*xi_8*2.0 + C_post_6*c_post_200*xi_8 + corr_fourth_3;
      const double chimera_m_post_2_1_e_1 = c_post_210*u_2 + kappa_post_211;
      const double chimera_m_post_2_e_1_1 = chimera_m_post_2_0_e_1*u_1 + chimera_m_post_2_1_e_1;
      const double m_post_211 = chimera_m_post_0_e_1_1*(u_0*u_0) + chimera_m_post_1_e_1_1*u_0*2.0 + chimera_m_post_2_e_1_1;
      const double corr_fourth_4 = DxwDzu*b_corr*m_000*xi_9*-0.33333333333333331 + DxwDzu*b_corr*m_000*0.16666666666666666;
      const double kappa_post_121 = C_post_4*C_post_6*xi_8*2.0 + C_post_5*c_post_020*xi_8 + corr_fourth_4;
      const double chimera_m_post_1_2_e_1 = c_post_120*u_2 + kappa_post_121;
      const double chimera_m_post_1_e_2_1 = C_post_5*(u_1*u_1) + chimera_m_post_1_1_e_1*u_1*2.0 + chimera_m_post_1_2_e_1;
      const double m_post_121 = chimera_m_post_0_e_2_1*u_0 + chimera_m_post_1_e_2_1;
      const double corr_fourth_5 = DxvDyu*b_corr*m_000*xi_9*-0.33333333333333331 + DxvDyu*b_corr*m_000*0.16666666666666666;
      const double kappa_post_112 = C_post_4*c_post_002*xi_8 + C_post_5*C_post_6*xi_8*2.0 + corr_fourth_5;
      const double chimera_m_post_1_1_e_2 = C_post_16*u_2*2.0 + C_post_4*(u_2*u_2) + kappa_post_112;
      const double chimera_m_post_1_e_1_2 = chimera_m_post_1_0_e_2*u_1 + chimera_m_post_1_1_e_2;
      const double m_post_112 = chimera_m_post_0_e_1_2*u_0 + chimera_m_post_1_e_1_2;
      const double kappa_post_221 = C_post_16*C_post_4*xi_8*4.0 + C_post_5*c_post_120*xi_8*2.0 + C_post_6*c_post_210*xi_8*2.0 + c_post_020*c_post_201*xi_8 + c_post_021*c_post_200*xi_8;
      const double kappa_post_212 = C_post_16*C_post_5*xi_8*4.0 + C_post_4*c_post_102*xi_8*2.0 + C_post_6*c_post_201*xi_8*2.0 + c_post_002*c_post_210*xi_8 + c_post_012*c_post_200*xi_8;
      const double kappa_post_122 = C_post_16*C_post_6*xi_8*4.0 + C_post_4*c_post_012*xi_8*2.0 + C_post_5*c_post_021*xi_8*2.0 + c_post_002*c_post_120*xi_8 + c_post_020*c_post_102*xi_8;
      const double chimera_m_post_2_2_e_1 = kappa_post_220*u_2 + kappa_post_221;
      const double chimera_m_post_2_e_2_1 = chimera_m_post_2_0_e_1*(u_1*u_1) + chimera_m_post_2_1_e_1*u_1*2.0 + chimera_m_post_2_2_e_1;
      const double chimera_m_post_2_1_e_2 = c_post_210*(u_2*u_2) + kappa_post_211*u_2*2.0 + kappa_post_212;
      const double chimera_m_post_2_e_1_2 = chimera_m_post_2_0_e_2*u_1 + chimera_m_post_2_1_e_2;
      const double chimera_m_post_1_2_e_2 = c_post_120*(u_2*u_2) + kappa_post_121*u_2*2.0 + kappa_post_122;
      const double chimera_m_post_1_e_2_2 = chimera_m_post_1_0_e_2*(u_1*u_1) + chimera_m_post_1_1_e_2*u_1*2.0 + chimera_m_post_1_2_e_2;
      const double m_post_221 = chimera_m_post_0_e_2_1*(u_0*u_0) + chimera_m_post_1_e_2_1*u_0*2.0 + chimera_m_post_2_e_2_1;
      const double m_post_212 = chimera_m_post_0_e_1_2*(u_0*u_0) + chimera_m_post_1_e_1_2*u_0*2.0 + chimera_m_post_2_e_1_2;
      const double m_post_122 = chimera_m_post_0_e_2_2*u_0 + chimera_m_post_1_e_2_2;
      const double sub_k_to_f_29 = chimera_m_post_0_e_1_0*0.5 + chimera_m_post_0_e_1_2*-0.5 + m_post_210*-0.5 + m_post_212*0.5;
      const double sub_k_to_f_31 = m_post_100*-0.5 + m_post_102*0.5 + m_post_120*0.5 + m_post_122*-0.5;
      const double sub_k_to_f_33 = chimera_m_post_0_0_e_1*0.5 + chimera_m_post_0_e_2_1*-0.5 + m_post_201*-0.5 + m_post_221*0.5;
      const double sub_k_to_f_35 = m_post_120*-0.25 + m_post_122*0.25 + m_post_210*0.25 + m_post_212*-0.25;
      const double sub_k_to_f_37 = m_post_120*0.25 + m_post_122*-0.25 + m_post_210*0.25 + m_post_212*-0.25;
      const double sub_k_to_f_39 = chimera_m_post_0_e_1_2*0.25 + chimera_m_post_0_e_2_1*0.25 + m_post_212*-0.25 + m_post_221*-0.25;
      const double sub_k_to_f_41 = chimera_m_post_0_e_1_2*-0.25 + chimera_m_post_0_e_2_1*0.25 + m_post_212*0.25 + m_post_221*-0.25;
      const double sub_k_to_f_43 = m_post_102*-0.25 + m_post_122*0.25 + m_post_201*0.25 + m_post_221*-0.25;
      const double sub_k_to_f_45 = m_post_102*0.25 + m_post_122*-0.25 + m_post_201*0.25 + m_post_221*-0.25;
      const double sub_k_to_f_47 = m_post_111*0.125 + m_post_122*0.125 + m_post_212*0.125 + m_post_221*0.125;
      const double sub_k_to_f_49 = m_post_111*-0.125 + m_post_122*-0.125 + m_post_212*0.125 + m_post_221*0.125;
      const double sub_k_to_f_51 = m_post_111*-0.125 + m_post_122*0.125 + m_post_212*-0.125 + m_post_221*0.125;
      const double sub_k_to_f_53 = m_post_111*0.125 + m_post_122*-0.125 + m_post_212*-0.125 + m_post_221*0.125;
      const double kappa_post_222 = C_post_4*C_post_5*C_post_6*xi_10*8.0 + C_post_4*corr_fourth_5*xi_8*4.0 + C_post_5*corr_fourth_4*xi_8*4.0 + C_post_6*corr_fourth_3*xi_8*4.0 + c_post_002*c_post_020*c_post_200*xi_10 + c_post_002*c_post_220*xi_8 + c_post_002*xi_10*2.0*(C_post_4*C_post_4) + c_post_012*c_post_210*xi_8*2.0 + c_post_020*c_post_202*xi_8 + c_post_020*xi_10*2.0*(C_post_5*C_post_5) + c_post_021*c_post_201*xi_8*2.0 + c_post_022*c_post_200*xi_8 + c_post_102*c_post_120*xi_8*2.0 + c_post_200*xi_10*2.0*(C_post_6*C_post_6) + xi_8*4.0*(C_post_16*C_post_16);
      const double chimera_m_post_2_2_e_2 = kappa_post_220*(u_2*u_2) + kappa_post_221*u_2*2.0 + kappa_post_222;
      const double chimera_m_post_2_e_2_2 = chimera_m_post_2_0_e_2*(u_1*u_1) + chimera_m_post_2_1_e_2*u_1*2.0 + chimera_m_post_2_2_e_2;
      const double m_post_222 = chimera_m_post_0_e_2_2*(u_0*u_0) + chimera_m_post_1_e_2_2*u_0*2.0 + chimera_m_post_2_e_2_2;
      const double sub_k_to_f_26 = m_post_222 - 0.037037037037037035;
      const double sub_k_to_f_28 = sub_k_to_f_17*-0.5 + sub_k_to_f_19*-0.5 + sub_k_to_f_26*0.5 + sub_k_to_f_5*0.5;
      const double sub_k_to_f_30 = sub_k_to_f_17*-0.5 + sub_k_to_f_18*-0.5 + sub_k_to_f_26*0.5 + sub_k_to_f_4*0.5;
      const double sub_k_to_f_32 = sub_k_to_f_18*-0.5 + sub_k_to_f_19*-0.5 + sub_k_to_f_26*0.5 + sub_k_to_f_6*0.5;
      const double sub_k_to_f_34 = m_post_110*-0.25 + m_post_112*0.25 + sub_k_to_f_17*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_36 = m_post_110*0.25 + m_post_112*-0.25 + sub_k_to_f_17*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_38 = chimera_m_post_0_e_1_1*0.25 + m_post_211*-0.25 + sub_k_to_f_19*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_40 = chimera_m_post_0_e_1_1*-0.25 + m_post_211*0.25 + sub_k_to_f_19*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_42 = m_post_101*-0.25 + m_post_121*0.25 + sub_k_to_f_18*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_44 = m_post_101*0.25 + m_post_121*-0.25 + sub_k_to_f_18*0.25 + sub_k_to_f_26*-0.25;
      const double sub_k_to_f_46 = m_post_112*0.125 + m_post_121*0.125 + m_post_211*0.125 + sub_k_to_f_26*0.125;
      const double sub_k_to_f_48 = m_post_112*-0.125 + m_post_121*-0.125 + m_post_211*0.125 + sub_k_to_f_26*0.125;
      const double sub_k_to_f_50 = m_post_112*-0.125 + m_post_121*0.125 + m_post_211*-0.125 + sub_k_to_f_26*0.125;
      const double sub_k_to_f_52 = m_post_112*0.125 + m_post_121*-0.125 + m_post_211*-0.125 + sub_k_to_f_26*0.125;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = sub_k_to_f_0 + sub_k_to_f_17 + sub_k_to_f_18 + sub_k_to_f_19 - sub_k_to_f_26 - sub_k_to_f_4 - sub_k_to_f_5 - sub_k_to_f_6;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = sub_k_to_f_28 + sub_k_to_f_29;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = sub_k_to_f_28 - sub_k_to_f_29;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = sub_k_to_f_30 + sub_k_to_f_31;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = sub_k_to_f_30 - sub_k_to_f_31;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] = sub_k_to_f_32 + sub_k_to_f_33;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] = sub_k_to_f_32 - sub_k_to_f_33;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = sub_k_to_f_34 + sub_k_to_f_35;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = sub_k_to_f_36 + sub_k_to_f_37;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = sub_k_to_f_36 - sub_k_to_f_37;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = sub_k_to_f_34 - sub_k_to_f_35;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] = sub_k_to_f_38 + sub_k_to_f_39;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] = sub_k_to_f_40 + sub_k_to_f_41;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] = sub_k_to_f_42 + sub_k_to_f_43;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] = sub_k_to_f_44 + sub_k_to_f_45;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] = sub_k_to_f_40 - sub_k_to_f_41;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] = sub_k_to_f_38 - sub_k_to_f_39;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] = sub_k_to_f_44 - sub_k_to_f_45;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] = sub_k_to_f_42 - sub_k_to_f_43;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] = sub_k_to_f_46 + sub_k_to_f_47;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] = sub_k_to_f_48 + sub_k_to_f_49;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] = sub_k_to_f_50 + sub_k_to_f_51;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] = sub_k_to_f_52 + sub_k_to_f_53;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] = sub_k_to_f_52 - sub_k_to_f_53;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] = sub_k_to_f_50 - sub_k_to_f_51;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] = sub_k_to_f_48 - sub_k_to_f_49;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] = sub_k_to_f_46 - sub_k_to_f_47;
   } 
}
}


namespace internal_TestSweepCollection_kernel_streamOdd {
static FUNC_PREFIX void TestSweepCollection_kernel_streamOdd(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double streamed_0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double streamed_1 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      const double streamed_2 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double streamed_3 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      const double streamed_4 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      const double streamed_5 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3];
      const double streamed_6 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3];
      const double streamed_7 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      const double streamed_8 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      const double streamed_9 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      const double streamed_10 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      const double streamed_11 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3];
      const double streamed_12 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3];
      const double streamed_13 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3];
      const double streamed_14 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3];
      const double streamed_15 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3];
      const double streamed_16 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3];
      const double streamed_17 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3];
      const double streamed_18 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3];
      const double streamed_19 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3];
      const double streamed_20 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3];
      const double streamed_21 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3];
      const double streamed_22 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3];
      const double streamed_23 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3];
      const double streamed_24 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3];
      const double streamed_25 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3];
      const double streamed_26 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3];
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = streamed_0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = streamed_1;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = streamed_2;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = streamed_3;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = streamed_4;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3] = streamed_5;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] = streamed_6;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = streamed_7;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = streamed_8;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = streamed_9;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = streamed_10;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] = streamed_11;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3] = streamed_12;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3] = streamed_13;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] = streamed_14;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] = streamed_15;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] = streamed_16;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] = streamed_17;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] = streamed_18;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] = streamed_19;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] = streamed_20;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] = streamed_21;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3] = streamed_22;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] = streamed_23;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] = streamed_24;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] = streamed_25;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] = streamed_26;
   } 
}
}

namespace internal_TestSweepCollection_kernel_streamEven {
static FUNC_PREFIX void TestSweepCollection_kernel_streamEven(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double streamed_0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double streamed_1 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double streamed_2 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      const double streamed_3 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      const double streamed_4 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      const double streamed_5 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3];
      const double streamed_6 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3];
      const double streamed_7 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      const double streamed_8 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      const double streamed_9 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      const double streamed_10 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      const double streamed_11 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3];
      const double streamed_12 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3];
      const double streamed_13 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3];
      const double streamed_14 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3];
      const double streamed_15 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3];
      const double streamed_16 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3];
      const double streamed_17 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3];
      const double streamed_18 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3];
      const double streamed_19 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3];
      const double streamed_20 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3];
      const double streamed_21 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3];
      const double streamed_22 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3];
      const double streamed_23 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3];
      const double streamed_24 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3];
      const double streamed_25 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3];
      const double streamed_26 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3];
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = streamed_0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = streamed_1;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = streamed_2;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = streamed_3;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = streamed_4;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3] = streamed_5;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] = streamed_6;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = streamed_7;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = streamed_8;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = streamed_9;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = streamed_10;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3] = streamed_11;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] = streamed_12;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] = streamed_13;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3] = streamed_14;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] = streamed_15;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] = streamed_16;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] = streamed_17;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] = streamed_18;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3] = streamed_19;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3] = streamed_20;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] = streamed_21;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] = streamed_22;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] = streamed_23;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] = streamed_24;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] = streamed_25;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] = streamed_26;
   } 
}
}


namespace internal_TestSweepCollection_kernel_streamOnlyNoAdvancementEven {
static FUNC_PREFIX void TestSweepCollection_kernel_streamOnlyNoAdvancementEven(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double streamed_0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double streamed_1 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double streamed_2 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      const double streamed_3 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      const double streamed_4 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      const double streamed_5 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3];
      const double streamed_6 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3];
      const double streamed_7 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      const double streamed_8 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      const double streamed_9 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      const double streamed_10 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      const double streamed_11 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3];
      const double streamed_12 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3];
      const double streamed_13 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3];
      const double streamed_14 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3];
      const double streamed_15 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3];
      const double streamed_16 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3];
      const double streamed_17 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3];
      const double streamed_18 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3];
      const double streamed_19 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3];
      const double streamed_20 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3];
      const double streamed_21 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3];
      const double streamed_22 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3];
      const double streamed_23 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3];
      const double streamed_24 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3];
      const double streamed_25 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3];
      const double streamed_26 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3];
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = streamed_0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = streamed_1;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = streamed_2;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = streamed_3;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = streamed_4;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3] = streamed_5;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] = streamed_6;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = streamed_7;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = streamed_8;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = streamed_9;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = streamed_10;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3] = streamed_11;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] = streamed_12;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] = streamed_13;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3] = streamed_14;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] = streamed_15;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] = streamed_16;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] = streamed_17;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] = streamed_18;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3] = streamed_19;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3] = streamed_20;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] = streamed_21;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] = streamed_22;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] = streamed_23;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] = streamed_24;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] = streamed_25;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] = streamed_26;
   } 
}
}

namespace internal_TestSweepCollection_kernel_streamOnlyNoAdvancementOdd {
static FUNC_PREFIX void TestSweepCollection_kernel_streamOnlyNoAdvancementOdd(double * RESTRICT  _data_pdfs, int64_t const _size_pdfs_0, int64_t const _size_pdfs_1, int64_t const _size_pdfs_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_pdfs_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_pdfs_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_pdfs_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double streamed_0 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double streamed_1 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3];
      const double streamed_2 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double streamed_3 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3];
      const double streamed_4 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3];
      const double streamed_5 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3];
      const double streamed_6 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3];
      const double streamed_7 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3];
      const double streamed_8 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3];
      const double streamed_9 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3];
      const double streamed_10 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3];
      const double streamed_11 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3];
      const double streamed_12 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3];
      const double streamed_13 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3];
      const double streamed_14 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3];
      const double streamed_15 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3];
      const double streamed_16 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3];
      const double streamed_17 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3];
      const double streamed_18 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3];
      const double streamed_19 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3];
      const double streamed_20 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3];
      const double streamed_21 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3];
      const double streamed_22 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3];
      const double streamed_23 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3];
      const double streamed_24 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3];
      const double streamed_25 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3];
      const double streamed_26 = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3];
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = streamed_0;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = streamed_1;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = streamed_2;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = streamed_3;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = streamed_4;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3] = streamed_5;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] = streamed_6;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = streamed_7;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = streamed_8;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = streamed_9;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = streamed_10;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] = streamed_11;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3] = streamed_12;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3] = streamed_13;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] = streamed_14;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] = streamed_15;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] = streamed_16;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] = streamed_17;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] = streamed_18;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] = streamed_19;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] = streamed_20;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] = streamed_21;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3] = streamed_22;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] = streamed_23;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] = streamed_24;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] = streamed_25;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] = streamed_26;
   } 
}
}


namespace internal_TestSweepCollection_kernel_initialiseOdd {
static FUNC_PREFIX void TestSweepCollection_kernel_initialiseOdd(double * RESTRICT const _data_density, double * RESTRICT  _data_pdfs, double * RESTRICT const _data_velocity, int64_t const _size_density_0, int64_t const _size_density_1, int64_t const _size_density_2, int64_t const _stride_density_0, int64_t const _stride_density_1, int64_t const _stride_density_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t const _stride_velocity_0, int64_t const _stride_velocity_1, int64_t const _stride_velocity_2, int64_t const _stride_velocity_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_density_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_density_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_density_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double rho = _data_density[_stride_density_0*ctr_0 + _stride_density_1*ctr_1 + _stride_density_2*ctr_2];
      const double u_0 = _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2];
      const double u_1 = _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + _stride_velocity_3];
      const double u_2 = _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + 2*_stride_velocity_3];
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = rho*-0.44444444444444442*(u_0*u_0) + rho*-0.44444444444444442*(u_1*u_1) + rho*-0.44444444444444442*(u_2*u_2) + rho*0.29629629629629628 + rho*0.66666666666666663*(u_0*u_0)*(u_1*u_1) + rho*0.66666666666666663*(u_0*u_0)*(u_2*u_2) + rho*0.66666666666666663*(u_1*u_1)*(u_2*u_2) - rho*u_0*u_0*u_1*u_1*u_2*u_2 - 0.29629629629629628;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = rho*u_1*-0.33333333333333331*(u_0*u_0) + rho*u_1*-0.33333333333333331*(u_2*u_2) + rho*u_1*0.22222222222222221 + rho*u_1*0.5*(u_0*u_0)*(u_2*u_2) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) + rho*0.22222222222222221*(u_1*u_1) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = rho*u_1*-0.22222222222222221 + rho*u_1*-0.5*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.33333333333333331*(u_0*u_0) + rho*u_1*0.33333333333333331*(u_2*u_2) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) + rho*0.22222222222222221*(u_1*u_1) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = rho*u_0*-0.22222222222222221 + rho*u_0*-0.5*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.33333333333333331*(u_1*u_1) + rho*u_0*0.33333333333333331*(u_2*u_2) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) + rho*0.22222222222222221*(u_0*u_0) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = rho*u_0*-0.33333333333333331*(u_1*u_1) + rho*u_0*-0.33333333333333331*(u_2*u_2) + rho*u_0*0.22222222222222221 + rho*u_0*0.5*(u_1*u_1)*(u_2*u_2) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) + rho*0.22222222222222221*(u_0*u_0) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] = rho*u_2*-0.33333333333333331*(u_0*u_0) + rho*u_2*-0.33333333333333331*(u_1*u_1) + rho*u_2*0.22222222222222221 + rho*u_2*0.5*(u_0*u_0)*(u_1*u_1) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) + rho*0.22222222222222221*(u_2*u_2) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3] = rho*u_2*-0.22222222222222221 + rho*u_2*-0.5*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.33333333333333331*(u_0*u_0) + rho*u_2*0.33333333333333331*(u_1*u_1) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) + rho*0.22222222222222221*(u_2*u_2) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = rho*u_0*u_1*-0.16666666666666666 + rho*u_0*u_1*0.25*(u_2*u_2) + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_1*u_1) + rho*u_0*0.083333333333333329*(u_2*u_2) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_1*-0.083333333333333329*(u_2*u_2) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = rho*u_0*u_1*-0.25*(u_2*u_2) + rho*u_0*u_1*0.16666666666666666 + rho*u_0*-0.083333333333333329*(u_2*u_2) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_1*u_1) + rho*u_1*-0.083333333333333329*(u_2*u_2) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = rho*u_0*u_1*-0.25*(u_2*u_2) + rho*u_0*u_1*0.16666666666666666 + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_1*u_1) + rho*u_0*0.083333333333333329*(u_2*u_2) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_0*u_0) + rho*u_1*0.083333333333333329*(u_2*u_2) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = rho*u_0*u_1*-0.16666666666666666 + rho*u_0*u_1*0.25*(u_2*u_2) + rho*u_0*-0.083333333333333329*(u_2*u_2) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_1*u_1) + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_0*u_0) + rho*u_1*0.083333333333333329*(u_2*u_2) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] = rho*u_1*u_2*-0.25*(u_0*u_0) + rho*u_1*u_2*0.16666666666666666 + rho*u_1*-0.083333333333333329*(u_0*u_0) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_0*u_0) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] = rho*u_1*u_2*-0.16666666666666666 + rho*u_1*u_2*0.25*(u_0*u_0) + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_2*u_2) + rho*u_1*0.083333333333333329*(u_0*u_0) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_0*u_0) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] = rho*u_0*u_2*-0.16666666666666666 + rho*u_0*u_2*0.25*(u_1*u_1) + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_2*u_2) + rho*u_0*0.083333333333333329*(u_1*u_1) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_1*u_1) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] = rho*u_0*u_2*-0.25*(u_1*u_1) + rho*u_0*u_2*0.16666666666666666 + rho*u_0*-0.083333333333333329*(u_1*u_1) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_1*u_1) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3] = rho*u_1*u_2*-0.16666666666666666 + rho*u_1*u_2*0.25*(u_0*u_0) + rho*u_1*-0.083333333333333329*(u_0*u_0) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_1*u_1) + rho*u_2*0.083333333333333329*(u_0*u_0) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] = rho*u_1*u_2*-0.25*(u_0*u_0) + rho*u_1*u_2*0.16666666666666666 + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_2*u_2) + rho*u_1*0.083333333333333329*(u_0*u_0) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_1*u_1) + rho*u_2*0.083333333333333329*(u_0*u_0) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] = rho*u_0*u_2*-0.25*(u_1*u_1) + rho*u_0*u_2*0.16666666666666666 + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_2*u_2) + rho*u_0*0.083333333333333329*(u_1*u_1) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_0*u_0) + rho*u_2*0.083333333333333329*(u_1*u_1) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3] = rho*u_0*u_2*-0.16666666666666666 + rho*u_0*u_2*0.25*(u_1*u_1) + rho*u_0*-0.083333333333333329*(u_1*u_1) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_0*u_0) + rho*u_2*0.083333333333333329*(u_1*u_1) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
   } 
}
}

namespace internal_TestSweepCollection_kernel_initialiseEven {
static FUNC_PREFIX void TestSweepCollection_kernel_initialiseEven(double * RESTRICT const _data_density, double * RESTRICT  _data_pdfs, double * RESTRICT const _data_velocity, int64_t const _size_density_0, int64_t const _size_density_1, int64_t const _size_density_2, int64_t const _stride_density_0, int64_t const _stride_density_1, int64_t const _stride_density_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t const _stride_velocity_0, int64_t const _stride_velocity_1, int64_t const _stride_velocity_2, int64_t const _stride_velocity_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_density_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_density_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_density_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double rho = _data_density[_stride_density_0*ctr_0 + _stride_density_1*ctr_1 + _stride_density_2*ctr_2];
      const double u_0 = _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2];
      const double u_1 = _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + _stride_velocity_3];
      const double u_2 = _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + 2*_stride_velocity_3];
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2] = rho*-0.44444444444444442*(u_0*u_0) + rho*-0.44444444444444442*(u_1*u_1) + rho*-0.44444444444444442*(u_2*u_2) + rho*0.29629629629629628 + rho*0.66666666666666663*(u_0*u_0)*(u_1*u_1) + rho*0.66666666666666663*(u_0*u_0)*(u_2*u_2) + rho*0.66666666666666663*(u_1*u_1)*(u_2*u_2) - rho*u_0*u_0*u_1*u_1*u_2*u_2 - 0.29629629629629628;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] = rho*u_1*-0.33333333333333331*(u_0*u_0) + rho*u_1*-0.33333333333333331*(u_2*u_2) + rho*u_1*0.22222222222222221 + rho*u_1*0.5*(u_0*u_0)*(u_2*u_2) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) + rho*0.22222222222222221*(u_1*u_1) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] = rho*u_1*-0.22222222222222221 + rho*u_1*-0.5*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.33333333333333331*(u_0*u_0) + rho*u_1*0.33333333333333331*(u_2*u_2) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) + rho*0.22222222222222221*(u_1*u_1) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] = rho*u_0*-0.22222222222222221 + rho*u_0*-0.5*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.33333333333333331*(u_1*u_1) + rho*u_0*0.33333333333333331*(u_2*u_2) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) + rho*0.22222222222222221*(u_0*u_0) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] = rho*u_0*-0.33333333333333331*(u_1*u_1) + rho*u_0*-0.33333333333333331*(u_2*u_2) + rho*u_0*0.22222222222222221 + rho*u_0*0.5*(u_1*u_1)*(u_2*u_2) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.1111111111111111*(u_2*u_2) + rho*-0.33333333333333331*(u_0*u_0)*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) + rho*0.22222222222222221*(u_0*u_0) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] = rho*u_2*-0.33333333333333331*(u_0*u_0) + rho*u_2*-0.33333333333333331*(u_1*u_1) + rho*u_2*0.22222222222222221 + rho*u_2*0.5*(u_0*u_0)*(u_1*u_1) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) + rho*0.22222222222222221*(u_2*u_2) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3] = rho*u_2*-0.22222222222222221 + rho*u_2*-0.5*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.33333333333333331*(u_0*u_0) + rho*u_2*0.33333333333333331*(u_1*u_1) + rho*-0.1111111111111111*(u_0*u_0) + rho*-0.1111111111111111*(u_1*u_1) + rho*-0.33333333333333331*(u_0*u_0)*(u_2*u_2) + rho*-0.33333333333333331*(u_1*u_1)*(u_2*u_2) + rho*0.07407407407407407 + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) + rho*0.22222222222222221*(u_2*u_2) + rho*0.5*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.07407407407407407;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] = rho*u_0*u_1*-0.16666666666666666 + rho*u_0*u_1*0.25*(u_2*u_2) + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_1*u_1) + rho*u_0*0.083333333333333329*(u_2*u_2) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_1*-0.083333333333333329*(u_2*u_2) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] = rho*u_0*u_1*-0.25*(u_2*u_2) + rho*u_0*u_1*0.16666666666666666 + rho*u_0*-0.083333333333333329*(u_2*u_2) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_1*u_1) + rho*u_1*-0.083333333333333329*(u_2*u_2) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] = rho*u_0*u_1*-0.25*(u_2*u_2) + rho*u_0*u_1*0.16666666666666666 + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_1*u_1) + rho*u_0*0.083333333333333329*(u_2*u_2) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_0*u_0) + rho*u_1*0.083333333333333329*(u_2*u_2) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] = rho*u_0*u_1*-0.16666666666666666 + rho*u_0*u_1*0.25*(u_2*u_2) + rho*u_0*-0.083333333333333329*(u_2*u_2) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_1*u_1) + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_0*u_0) + rho*u_1*0.083333333333333329*(u_2*u_2) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*-0.027777777777777776*(u_2*u_2) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_1*u_1) + rho*0.16666666666666666*(u_0*u_0)*(u_1*u_1) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] = rho*u_1*u_2*-0.25*(u_0*u_0) + rho*u_1*u_2*0.16666666666666666 + rho*u_1*-0.083333333333333329*(u_0*u_0) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_0*u_0) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] = rho*u_1*u_2*-0.16666666666666666 + rho*u_1*u_2*0.25*(u_0*u_0) + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_2*u_2) + rho*u_1*0.083333333333333329*(u_0*u_0) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_0*u_0) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] = rho*u_0*u_2*-0.16666666666666666 + rho*u_0*u_2*0.25*(u_1*u_1) + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_2*u_2) + rho*u_0*0.083333333333333329*(u_1*u_1) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_1*u_1) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] = rho*u_0*u_2*-0.25*(u_1*u_1) + rho*u_0*u_2*0.16666666666666666 + rho*u_0*-0.083333333333333329*(u_1*u_1) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.083333333333333329*(u_1*u_1) + rho*u_2*-0.25*(u_0*u_0)*(u_1*u_1) + rho*u_2*0.055555555555555552 + rho*u_2*0.16666666666666666*(u_0*u_0) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] = rho*u_1*u_2*-0.16666666666666666 + rho*u_1*u_2*0.25*(u_0*u_0) + rho*u_1*-0.083333333333333329*(u_0*u_0) + rho*u_1*-0.25*(u_0*u_0)*(u_2*u_2) + rho*u_1*0.055555555555555552 + rho*u_1*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_1*u_1) + rho*u_2*0.083333333333333329*(u_0*u_0) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3] = rho*u_1*u_2*-0.25*(u_0*u_0) + rho*u_1*u_2*0.16666666666666666 + rho*u_1*-0.055555555555555552 + rho*u_1*-0.16666666666666666*(u_2*u_2) + rho*u_1*0.083333333333333329*(u_0*u_0) + rho*u_1*0.25*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_1*u_1) + rho*u_2*0.083333333333333329*(u_0*u_0) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_0*u_0) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_1*u_1) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_1*u_1)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3] = rho*u_0*u_2*-0.25*(u_1*u_1) + rho*u_0*u_2*0.16666666666666666 + rho*u_0*-0.055555555555555552 + rho*u_0*-0.16666666666666666*(u_2*u_2) + rho*u_0*0.083333333333333329*(u_1*u_1) + rho*u_0*0.25*(u_1*u_1)*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_0*u_0) + rho*u_2*0.083333333333333329*(u_1*u_1) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] = rho*u_0*u_2*-0.16666666666666666 + rho*u_0*u_2*0.25*(u_1*u_1) + rho*u_0*-0.083333333333333329*(u_1*u_1) + rho*u_0*-0.25*(u_1*u_1)*(u_2*u_2) + rho*u_0*0.055555555555555552 + rho*u_0*0.16666666666666666*(u_2*u_2) + rho*u_2*-0.055555555555555552 + rho*u_2*-0.16666666666666666*(u_0*u_0) + rho*u_2*0.083333333333333329*(u_1*u_1) + rho*u_2*0.25*(u_0*u_0)*(u_1*u_1) + rho*-0.027777777777777776*(u_1*u_1) + rho*-0.083333333333333329*(u_0*u_0)*(u_1*u_1) + rho*-0.083333333333333329*(u_1*u_1)*(u_2*u_2) + rho*-0.25*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) + rho*0.018518518518518517 + rho*0.055555555555555552*(u_0*u_0) + rho*0.055555555555555552*(u_2*u_2) + rho*0.16666666666666666*(u_0*u_0)*(u_2*u_2) - 0.018518518518518517;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*0.013888888888888888 + rho*u_2*0.041666666666666664*(u_0*u_0) + rho*u_2*0.041666666666666664*(u_1*u_1) + rho*u_2*0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*-0.041666666666666664 + rho*u_1*u_2*-0.125*(u_0*u_0) + rho*u_1*0.013888888888888888 + rho*u_1*0.041666666666666664*(u_0*u_0) + rho*u_1*0.041666666666666664*(u_2*u_2) + rho*u_1*0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3] = rho*u_0*u_1*u_2*0.125 + rho*u_0*u_1*-0.041666666666666664 + rho*u_0*u_1*-0.125*(u_2*u_2) + rho*u_0*u_2*-0.041666666666666664 + rho*u_0*u_2*-0.125*(u_1*u_1) + rho*u_0*0.013888888888888888 + rho*u_0*0.041666666666666664*(u_1*u_1) + rho*u_0*0.041666666666666664*(u_2*u_2) + rho*u_0*0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
      _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3] = rho*u_0*u_1*u_2*-0.125 + rho*u_0*u_1*0.041666666666666664 + rho*u_0*u_1*0.125*(u_2*u_2) + rho*u_0*u_2*0.041666666666666664 + rho*u_0*u_2*0.125*(u_1*u_1) + rho*u_0*-0.013888888888888888 + rho*u_0*-0.041666666666666664*(u_1*u_1) + rho*u_0*-0.041666666666666664*(u_2*u_2) + rho*u_0*-0.125*(u_1*u_1)*(u_2*u_2) + rho*u_1*u_2*0.041666666666666664 + rho*u_1*u_2*0.125*(u_0*u_0) + rho*u_1*-0.013888888888888888 + rho*u_1*-0.041666666666666664*(u_0*u_0) + rho*u_1*-0.041666666666666664*(u_2*u_2) + rho*u_1*-0.125*(u_0*u_0)*(u_2*u_2) + rho*u_2*-0.013888888888888888 + rho*u_2*-0.041666666666666664*(u_0*u_0) + rho*u_2*-0.041666666666666664*(u_1*u_1) + rho*u_2*-0.125*(u_0*u_0)*(u_1*u_1) + rho*0.0046296296296296294 + rho*0.013888888888888888*(u_0*u_0) + rho*0.013888888888888888*(u_1*u_1) + rho*0.013888888888888888*(u_2*u_2) + rho*0.041666666666666664*(u_0*u_0)*(u_1*u_1) + rho*0.041666666666666664*(u_0*u_0)*(u_2*u_2) + rho*0.041666666666666664*(u_1*u_1)*(u_2*u_2) + rho*0.125*(u_0*u_0)*(u_1*u_1)*(u_2*u_2) - 0.0046296296296296294;
   } 
}
}


namespace internal_TestSweepCollection_kernel_getterOdd {
static FUNC_PREFIX void TestSweepCollection_kernel_getterOdd(double * RESTRICT  _data_density, double * RESTRICT const _data_pdfs, double * RESTRICT  _data_velocity, int64_t const _size_density_0, int64_t const _size_density_1, int64_t const _size_density_2, int64_t const _stride_density_0, int64_t const _stride_density_1, int64_t const _stride_density_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t const _stride_velocity_0, int64_t const _stride_velocity_1, int64_t const _stride_velocity_2, int64_t const _stride_velocity_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_density_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_density_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_density_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double vel0Term = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3];
      const double momdensity_0 = vel0Term - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3];
      const double vel1Term = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double momdensity_1 = vel1Term + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3];
      const double vel2Term = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 12*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 13*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 22*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 5*_stride_pdfs_3];
      const double delta_rho = vel0Term + vel1Term + vel2Term + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double momdensity_2 = vel2Term - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 23*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 18*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 25*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 14*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 21*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 15*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 24*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 11*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 20*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 16*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 17*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 26*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 6*_stride_pdfs_3];
      const double rho = delta_rho + 1.0;
      const double u_0 = momdensity_0*((1.0) / (rho));
      const double u_1 = momdensity_1*((1.0) / (rho));
      const double u_2 = momdensity_2*((1.0) / (rho));
      _data_density[_stride_density_0*ctr_0 + _stride_density_1*ctr_1 + _stride_density_2*ctr_2] = rho;
      _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2] = u_0;
      _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + _stride_velocity_3] = u_1;
      _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + 2*_stride_velocity_3] = u_2;
   } 
}
}

namespace internal_TestSweepCollection_kernel_getterEven {
static FUNC_PREFIX void TestSweepCollection_kernel_getterEven(double * RESTRICT  _data_density, double * RESTRICT const _data_pdfs, double * RESTRICT  _data_velocity, int64_t const _size_density_0, int64_t const _size_density_1, int64_t const _size_density_2, int64_t const _stride_density_0, int64_t const _stride_density_1, int64_t const _stride_density_2, int64_t const _stride_pdfs_0, int64_t const _stride_pdfs_1, int64_t const _stride_pdfs_2, int64_t const _stride_pdfs_3, int64_t const _stride_velocity_0, int64_t const _stride_velocity_1, int64_t const _stride_velocity_2, int64_t const _stride_velocity_3, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2)
{
   if (blockDim.x*blockIdx.x + threadIdx.x < _size_density_0 && blockDim.y*blockIdx.y + threadIdx.y < _size_density_1 && blockDim.z*blockIdx.z + threadIdx.z < _size_density_2)
   {
      const int64_t ctr_0 = blockDim.x*blockIdx.x + threadIdx.x;
      const int64_t ctr_1 = blockDim.y*blockIdx.y + threadIdx.y;
      const int64_t ctr_2 = blockDim.z*blockIdx.z + threadIdx.z;
      const double vel0Term = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 3*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3];
      const double momdensity_0 = vel0Term - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3];
      const double vel1Term = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 10*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 2*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3];
      const double momdensity_1 = vel1Term + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 9*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 7*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3];
      const double vel2Term = _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 15*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 18*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 23*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 6*_stride_pdfs_3];
      const double delta_rho = vel0Term + vel1Term + vel2Term + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 4*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 8*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2];
      const double momdensity_2 = vel2Term - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 22*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 26*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 13*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 20*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 17*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 24*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 12*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + 21*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 16*_stride_pdfs_3] + _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_1 + _stride_pdfs_2*ctr_2 + _stride_pdfs_2 + 25*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 11*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 14*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 19*_stride_pdfs_3] - _data_pdfs[_stride_pdfs_0*ctr_0 + _stride_pdfs_1*ctr_1 + _stride_pdfs_2*ctr_2 + 5*_stride_pdfs_3];
      const double rho = delta_rho + 1.0;
      const double u_0 = momdensity_0*((1.0) / (rho));
      const double u_1 = momdensity_1*((1.0) / (rho));
      const double u_2 = momdensity_2*((1.0) / (rho));
      _data_density[_stride_density_0*ctr_0 + _stride_density_1*ctr_1 + _stride_density_2*ctr_2] = rho;
      _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2] = u_0;
      _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + _stride_velocity_3] = u_1;
      _data_velocity[_stride_velocity_0*ctr_0 + _stride_velocity_1*ctr_1 + _stride_velocity_2*ctr_2 + 2*_stride_velocity_3] = u_2;
   } 
}
}





void TestSweepCollection::streamCollide( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega, uint8_t timestep, const cell_idx_t ghost_layers, gpuStream_t stream )
{
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_0 = int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers))
   const int64_t _size_pdfs_1 = int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_2 = int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamCollideEven::TestSweepCollection_kernel_streamCollideEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamCollideOdd::TestSweepCollection_kernel_streamCollideOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   }
}
void TestSweepCollection::streamCollideCellInterval( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega, uint8_t timestep, const CellInterval & ci, gpuStream_t stream)
{
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(ci.xSize()) + 0))
   const int64_t _size_pdfs_0 = int64_t(int64_c(ci.xSize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(ci.ySize()) + 0))
   const int64_t _size_pdfs_1 = int64_t(int64_c(ci.ySize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(ci.zSize()) + 0))
   const int64_t _size_pdfs_2 = int64_t(int64_c(ci.zSize()) + 0);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamCollideEven::TestSweepCollection_kernel_streamCollideEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamCollideOdd::TestSweepCollection_kernel_streamCollideOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   }
}

void TestSweepCollection::collide( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega, uint8_t timestep, const cell_idx_t ghost_layers, gpuStream_t stream )
{
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_0 = int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers))
   const int64_t _size_pdfs_1 = int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_2 = int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_collideEven::TestSweepCollection_kernel_collideEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_collideOdd::TestSweepCollection_kernel_collideOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   }
}
void TestSweepCollection::collideCellInterval( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, double omega, uint8_t timestep, const CellInterval & ci, gpuStream_t stream)
{
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(ci.xSize()) + 0))
   const int64_t _size_pdfs_0 = int64_t(int64_c(ci.xSize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(ci.ySize()) + 0))
   const int64_t _size_pdfs_1 = int64_t(int64_c(ci.ySize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(ci.zSize()) + 0))
   const int64_t _size_pdfs_2 = int64_t(int64_c(ci.zSize()) + 0);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_collideEven::TestSweepCollection_kernel_collideEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_collideOdd::TestSweepCollection_kernel_collideOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2, omega);
   }
}

void TestSweepCollection::stream( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const cell_idx_t ghost_layers, gpuStream_t stream )
{
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_0 = int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers))
   const int64_t _size_pdfs_1 = int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_2 = int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamEven::TestSweepCollection_kernel_streamEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamOdd::TestSweepCollection_kernel_streamOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}
void TestSweepCollection::streamCellInterval( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const CellInterval & ci, gpuStream_t stream)
{
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(ci.xSize()) + 0))
   const int64_t _size_pdfs_0 = int64_t(int64_c(ci.xSize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(ci.ySize()) + 0))
   const int64_t _size_pdfs_1 = int64_t(int64_c(ci.ySize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(ci.zSize()) + 0))
   const int64_t _size_pdfs_2 = int64_t(int64_c(ci.zSize()) + 0);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamEven::TestSweepCollection_kernel_streamEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamOdd::TestSweepCollection_kernel_streamOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}

void TestSweepCollection::streamOnlyNoAdvancement( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const cell_idx_t ghost_layers, gpuStream_t stream )
{
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_0 = int64_t(int64_c(pdfs->xSize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers))
   const int64_t _size_pdfs_1 = int64_t(int64_c(pdfs->ySize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers))
   const int64_t _size_pdfs_2 = int64_t(int64_c(pdfs->zSize()) + 2*ghost_layers);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamOnlyNoAdvancementEven::TestSweepCollection_kernel_streamOnlyNoAdvancementEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamOnlyNoAdvancementOdd::TestSweepCollection_kernel_streamOnlyNoAdvancementOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}
void TestSweepCollection::streamOnlyNoAdvancementCellInterval( gpu::GPUField<double> * pdfs, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const CellInterval & ci, gpuStream_t stream)
{
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->xSizeWithGhostLayer(), int64_t(int64_c(ci.xSize()) + 0))
   const int64_t _size_pdfs_0 = int64_t(int64_c(ci.xSize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->ySizeWithGhostLayer(), int64_t(int64_c(ci.ySize()) + 0))
   const int64_t _size_pdfs_1 = int64_t(int64_c(ci.ySize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(pdfs->zSizeWithGhostLayer(), int64_t(int64_c(ci.zSize()) + 0))
   const int64_t _size_pdfs_2 = int64_t(int64_c(ci.zSize()) + 0);
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamOnlyNoAdvancementEven::TestSweepCollection_kernel_streamOnlyNoAdvancementEven<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_pdfs_0) % (((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) : ( (int64_t)(_size_pdfs_0) / (int64_t)(((1024 < ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)) ? 1024 : ((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_pdfs_1) % (((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_pdfs_1) / (int64_t)(((1024 < ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))) ? 1024 : ((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_pdfs_2) % (((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_pdfs_2) / (int64_t)(((64 < ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))))))) ? 64 : ((_size_pdfs_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))) ? _size_pdfs_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)*((_size_pdfs_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0)))) ? _size_pdfs_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_pdfs_0 < cudaBlockSize0) ? _size_pdfs_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_streamOnlyNoAdvancementOdd::TestSweepCollection_kernel_streamOnlyNoAdvancementOdd<<<_grid, _block, 0, stream>>>(_data_pdfs, _size_pdfs_0, _size_pdfs_1, _size_pdfs_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}

void TestSweepCollection::initialise( gpu::GPUField<double> * density, gpu::GPUField<double> * pdfs, gpu::GPUField<double> * velocity, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const cell_idx_t ghost_layers, gpuStream_t stream )
{
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(density->nrOfGhostLayers()))
   double * RESTRICT const _data_density = density->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(velocity->nrOfGhostLayers()))
   double * RESTRICT const _data_velocity = velocity->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->xSizeWithGhostLayer(), int64_t(int64_c(density->xSize()) + 2*ghost_layers))
   const int64_t _size_density_0 = int64_t(int64_c(density->xSize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(density->ySizeWithGhostLayer(), int64_t(int64_c(density->ySize()) + 2*ghost_layers))
   const int64_t _size_density_1 = int64_t(int64_c(density->ySize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(density->zSizeWithGhostLayer(), int64_t(int64_c(density->zSize()) + 2*ghost_layers))
   const int64_t _size_density_2 = int64_t(int64_c(density->zSize()) + 2*ghost_layers);
   const int64_t _stride_density_0 = int64_t(density->xStride());
   const int64_t _stride_density_1 = int64_t(density->yStride());
   const int64_t _stride_density_2 = int64_t(density->zStride());
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   const int64_t _stride_velocity_0 = int64_t(velocity->xStride());
   const int64_t _stride_velocity_1 = int64_t(velocity->yStride());
   const int64_t _stride_velocity_2 = int64_t(velocity->zStride());
   const int64_t _stride_velocity_3 = int64_t(1 * int64_t(velocity->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_initialiseEven::TestSweepCollection_kernel_initialiseEven<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_initialiseOdd::TestSweepCollection_kernel_initialiseOdd<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}
void TestSweepCollection::initialiseCellInterval( gpu::GPUField<double> * density, gpu::GPUField<double> * pdfs, gpu::GPUField<double> * velocity, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const CellInterval & ci, gpuStream_t stream)
{
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(density->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(density->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(density->nrOfGhostLayers()))
   double * RESTRICT const _data_density = density->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT  _data_pdfs = pdfs->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(velocity->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(velocity->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(velocity->nrOfGhostLayers()))
   double * RESTRICT const _data_velocity = velocity->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->xSizeWithGhostLayer(), int64_t(int64_c(ci.xSize()) + 0))
   const int64_t _size_density_0 = int64_t(int64_c(ci.xSize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->ySizeWithGhostLayer(), int64_t(int64_c(ci.ySize()) + 0))
   const int64_t _size_density_1 = int64_t(int64_c(ci.ySize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->zSizeWithGhostLayer(), int64_t(int64_c(ci.zSize()) + 0))
   const int64_t _size_density_2 = int64_t(int64_c(ci.zSize()) + 0);
   const int64_t _stride_density_0 = int64_t(density->xStride());
   const int64_t _stride_density_1 = int64_t(density->yStride());
   const int64_t _stride_density_2 = int64_t(density->zStride());
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   const int64_t _stride_velocity_0 = int64_t(velocity->xStride());
   const int64_t _stride_velocity_1 = int64_t(velocity->yStride());
   const int64_t _stride_velocity_2 = int64_t(velocity->zStride());
   const int64_t _stride_velocity_3 = int64_t(1 * int64_t(velocity->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_initialiseEven::TestSweepCollection_kernel_initialiseEven<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_initialiseOdd::TestSweepCollection_kernel_initialiseOdd<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}

void TestSweepCollection::calculateMacroscopicParameters( gpu::GPUField<double> * density, gpu::GPUField<double> * pdfs, gpu::GPUField<double> * velocity, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const cell_idx_t ghost_layers, gpuStream_t stream )
{
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(density->nrOfGhostLayers()))
   double * RESTRICT  _data_density = density->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT const _data_pdfs = pdfs->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(-ghost_layers, -int_c(velocity->nrOfGhostLayers()))
   double * RESTRICT  _data_velocity = velocity->dataAt(-ghost_layers, -ghost_layers, -ghost_layers, 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->xSizeWithGhostLayer(), int64_t(int64_c(density->xSize()) + 2*ghost_layers))
   const int64_t _size_density_0 = int64_t(int64_c(density->xSize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(density->ySizeWithGhostLayer(), int64_t(int64_c(density->ySize()) + 2*ghost_layers))
   const int64_t _size_density_1 = int64_t(int64_c(density->ySize()) + 2*ghost_layers);
   WALBERLA_ASSERT_GREATER_EQUAL(density->zSizeWithGhostLayer(), int64_t(int64_c(density->zSize()) + 2*ghost_layers))
   const int64_t _size_density_2 = int64_t(int64_c(density->zSize()) + 2*ghost_layers);
   const int64_t _stride_density_0 = int64_t(density->xStride());
   const int64_t _stride_density_1 = int64_t(density->yStride());
   const int64_t _stride_density_2 = int64_t(density->zStride());
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   const int64_t _stride_velocity_0 = int64_t(velocity->xStride());
   const int64_t _stride_velocity_1 = int64_t(velocity->yStride());
   const int64_t _stride_velocity_2 = int64_t(velocity->zStride());
   const int64_t _stride_velocity_3 = int64_t(1 * int64_t(velocity->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_getterEven::TestSweepCollection_kernel_getterEven<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_getterOdd::TestSweepCollection_kernel_getterOdd<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}
void TestSweepCollection::calculateMacroscopicParametersCellInterval( gpu::GPUField<double> * density, gpu::GPUField<double> * pdfs, gpu::GPUField<double> * velocity, int64_t cudaBlockSize0, int64_t cudaBlockSize1, int64_t cudaBlockSize2, uint8_t timestep, const CellInterval & ci, gpuStream_t stream)
{
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(density->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(density->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(density->nrOfGhostLayers()))
   double * RESTRICT  _data_density = density->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(pdfs->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(pdfs->nrOfGhostLayers()))
   double * RESTRICT const _data_pdfs = pdfs->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(ci.xMin(), -int_c(velocity->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.yMin(), -int_c(velocity->nrOfGhostLayers()))
   WALBERLA_ASSERT_GREATER_EQUAL(ci.zMin(), -int_c(velocity->nrOfGhostLayers()))
   double * RESTRICT  _data_velocity = velocity->dataAt(ci.xMin(), ci.yMin(), ci.zMin(), 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->xSizeWithGhostLayer(), int64_t(int64_c(ci.xSize()) + 0))
   const int64_t _size_density_0 = int64_t(int64_c(ci.xSize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->ySizeWithGhostLayer(), int64_t(int64_c(ci.ySize()) + 0))
   const int64_t _size_density_1 = int64_t(int64_c(ci.ySize()) + 0);
   WALBERLA_ASSERT_GREATER_EQUAL(density->zSizeWithGhostLayer(), int64_t(int64_c(ci.zSize()) + 0))
   const int64_t _size_density_2 = int64_t(int64_c(ci.zSize()) + 0);
   const int64_t _stride_density_0 = int64_t(density->xStride());
   const int64_t _stride_density_1 = int64_t(density->yStride());
   const int64_t _stride_density_2 = int64_t(density->zStride());
   const int64_t _stride_pdfs_0 = int64_t(pdfs->xStride());
   const int64_t _stride_pdfs_1 = int64_t(pdfs->yStride());
   const int64_t _stride_pdfs_2 = int64_t(pdfs->zStride());
   const int64_t _stride_pdfs_3 = int64_t(1 * int64_t(pdfs->fStride()));
   const int64_t _stride_velocity_0 = int64_t(velocity->xStride());
   const int64_t _stride_velocity_1 = int64_t(velocity->yStride());
   const int64_t _stride_velocity_2 = int64_t(velocity->zStride());
   const int64_t _stride_velocity_3 = int64_t(1 * int64_t(velocity->fStride()));
   if(((timestep & 1) ^ 1)) {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_getterEven::TestSweepCollection_kernel_getterEven<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   } else {
       dim3 _block(uint32_c(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))), uint32_c(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))), uint32_c(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))));
       dim3 _grid(uint32_c(( (_size_density_0) % (((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) == 0 ? (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) : ( (int64_t)(_size_density_0) / (int64_t)(((1024 < ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)) ? 1024 : ((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))) ) +1 )), uint32_c(( (_size_density_1) % (((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) == 0 ? (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) : ( (int64_t)(_size_density_1) / (int64_t)(((1024 < ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))) ? 1024 : ((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))) ) +1 )), uint32_c(( (_size_density_2) % (((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) == 0 ? (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) : ( (int64_t)(_size_density_2) / (int64_t)(((64 < ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))))))) ? 64 : ((_size_density_2 < cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))) ? _size_density_2 : cudaBlockSize2*((int64_t)(cudaBlockSize0*cudaBlockSize1) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)*((_size_density_1 < cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0)))) ? _size_density_1 : cudaBlockSize1*((int64_t)(cudaBlockSize0) / (int64_t)(((_size_density_0 < cudaBlockSize0) ? _size_density_0 : cudaBlockSize0))))))))) ) +1 )));
       internal_TestSweepCollection_kernel_getterOdd::TestSweepCollection_kernel_getterOdd<<<_grid, _block, 0, stream>>>(_data_density, _data_pdfs, _data_velocity, _size_density_0, _size_density_1, _size_density_2, _stride_density_0, _stride_density_1, _stride_density_2, _stride_pdfs_0, _stride_pdfs_1, _stride_pdfs_2, _stride_pdfs_3, _stride_velocity_0, _stride_velocity_1, _stride_velocity_2, _stride_velocity_3, cudaBlockSize0, cudaBlockSize1, cudaBlockSize2);
   }
}



} // namespace lbm
} // namespace walberla


#if ( defined WALBERLA_CXX_COMPILER_IS_GNU ) || ( defined WALBERLA_CXX_COMPILER_IS_CLANG )
#   pragma GCC diagnostic pop
#endif

#if ( defined WALBERLA_CXX_COMPILER_IS_INTEL )
#pragma warning pop
#endif